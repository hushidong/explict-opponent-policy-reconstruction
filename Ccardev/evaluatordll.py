# -*- coding: utf-8 -*-

import math
import sys
import numpy as np
import random
import copy
import itertools
import matplotlib.pyplot as plt

sys.path.append("D:\\TexasHoldem\\LuaDemo\\agent") 
from Ccardev.opmodels import *

'''
1.利用我自己写的dll中函数进行赢率计算及成牌概率相关计算，dll中rank搜索采用two-plus-two方法和cav、palsee的方法。
2.也可以利用CardEvaluator计算赢率
#from CardEvaluator.lookup import lookup
3.也可以利用deuces计算赢率和显示
#from deuces import Deck
#from deuces import Card
#from deuces import Evaluator
#evaluator = Evaluator()
4.成牌概率仍然用遍历的方式计算，如果需要可以采用MC方法来加速。因为利用排列组合的方式计算过于繁琐，一些实现可以参考evaluatordll-calcprob.py。
'''


#用import *的方式可以把c_float，c_double等类型载入进来，而不用再带一个ctypes.
from ctypes import * 

#考虑对手手牌起手范围情况下，对手未弃牌产生的我方赢率高估的倍数
# 行数表示169种手牌
# 列数表示：对应起手范围下限为0.05,0.15,0.3,0.45,0.6,0.75,0.9
wrdncthr=[[1.0, 1.01, 1.02, 1.04, 1.05, 1.09, 1.17] ,
[1.0, 1.02, 1.05, 1.04, 1.06, 1.09, 1.15] ,
[1.0, 1.02, 1.05, 1.06, 1.07, 1.09, 1.16] ,
[1.0, 1.03, 1.05, 1.06, 1.07, 1.11, 1.18] ,
[1.0, 1.04, 1.07, 1.09, 1.11, 1.14, 1.24] ,
[1.01, 1.06, 1.13, 1.14, 1.15, 1.2, 1.28] ,
[1.01, 1.05, 1.15, 1.19, 1.21, 1.25, 1.32] ,
[1.0, 1.04, 1.16, 1.23, 1.25, 1.32, 1.42] ,
[1.0, 1.04, 1.16, 1.27, 1.31, 1.38, 1.52] ,
[1.0, 1.04, 1.12, 1.26, 1.37, 1.45, 1.55] ,
[1.0, 1.03, 1.1, 1.2, 1.33, 1.48, 1.61] ,
[1.0, 1.03, 1.06, 1.12, 1.23, 1.46, 1.73] ,
[1.0, 1.02, 1.04, 1.07, 1.12, 1.26, 1.47] ,
[1.0, 1.01, 1.03, 1.04, 1.04, 1.08, 1.13] ,
[1.0, 1.02, 1.04, 1.05, 1.09, 1.14, 1.22] ,
[1.0, 1.03, 1.04, 1.06, 1.08, 1.1, 1.17] ,
[1.0, 1.03, 1.05, 1.07, 1.09, 1.12, 1.19] ,
[1.0, 1.05, 1.08, 1.1, 1.12, 1.15, 1.24] ,
[1.0, 1.05, 1.12, 1.15, 1.16, 1.2, 1.28] ,
[1.0, 1.06, 1.15, 1.2, 1.21, 1.27, 1.33] ,
[1.0, 1.04, 1.18, 1.25, 1.27, 1.34, 1.43] ,
[1.0, 1.04, 1.15, 1.27, 1.34, 1.39, 1.5] ,
[1.0, 1.04, 1.13, 1.26, 1.36, 1.46, 1.56] ,
[1.0, 1.02, 1.1, 1.2, 1.33, 1.49, 1.6] ,
[1.0, 1.02, 1.07, 1.13, 1.24, 1.47, 1.74] ,
[1.0, 1.02, 1.04, 1.07, 1.12, 1.27, 1.47] ,
[1.01, 1.02, 1.04, 1.05, 1.05, 1.09, 1.13] ,
[1.0, 1.02, 1.04, 1.06, 1.07, 1.1, 1.14] ,
[1.0, 1.02, 1.05, 1.07, 1.11, 1.17, 1.28] ,
[1.0, 1.03, 1.06, 1.08, 1.08, 1.13, 1.2] ,
[1.0, 1.04, 1.09, 1.1, 1.11, 1.15, 1.24] ,
[1.01, 1.05, 1.12, 1.14, 1.16, 1.2, 1.29] ,
[1.0, 1.05, 1.16, 1.19, 1.21, 1.26, 1.33] ,
[1.0, 1.05, 1.16, 1.24, 1.28, 1.33, 1.43] ,
[1.0, 1.04, 1.15, 1.27, 1.33, 1.41, 1.52] ,
[1.0, 1.03, 1.13, 1.26, 1.36, 1.46, 1.56] ,
[1.0, 1.03, 1.1, 1.18, 1.33, 1.5, 1.63] ,
[1.0, 1.02, 1.07, 1.14, 1.25, 1.47, 1.74] ,
[1.0, 1.01, 1.04, 1.08, 1.12, 1.27, 1.47] ,
[1.0, 1.02, 1.05, 1.06, 1.07, 1.1, 1.17] ,
[1.0, 1.03, 1.05, 1.06, 1.08, 1.1, 1.16] ,
[1.0, 1.03, 1.06, 1.06, 1.07, 1.1, 1.16] ,
[1.0, 1.03, 1.07, 1.09, 1.12, 1.19, 1.32] ,
[1.0, 1.03, 1.09, 1.1, 1.13, 1.15, 1.23] ,
[1.0, 1.04, 1.13, 1.14, 1.17, 1.19, 1.29] ,
[1.0, 1.04, 1.16, 1.2, 1.22, 1.26, 1.34] ,
[1.0, 1.06, 1.17, 1.24, 1.28, 1.32, 1.44] ,
[1.0, 1.04, 1.15, 1.28, 1.35, 1.41, 1.54] ,
[1.0, 1.03, 1.12, 1.26, 1.38, 1.46, 1.59] ,
[1.0, 1.03, 1.09, 1.19, 1.34, 1.5, 1.64] ,
[1.0, 1.02, 1.07, 1.13, 1.23, 1.47, 1.74] ,
[1.0, 1.01, 1.04, 1.08, 1.12, 1.26, 1.49] ,
[1.0, 1.03, 1.06, 1.08, 1.09, 1.12, 1.19] ,
[1.0, 1.03, 1.07, 1.08, 1.1, 1.12, 1.19] ,
[1.0, 1.04, 1.07, 1.09, 1.09, 1.11, 1.2] ,
[1.0, 1.04, 1.08, 1.09, 1.1, 1.13, 1.2] ,
[1.0, 1.03, 1.07, 1.1, 1.13, 1.19, 1.36] ,
[1.0, 1.04, 1.13, 1.16, 1.16, 1.2, 1.29] ,
[1.0, 1.04, 1.14, 1.19, 1.22, 1.24, 1.33] ,
[1.0, 1.03, 1.15, 1.25, 1.27, 1.31, 1.43] ,
[1.0, 1.03, 1.14, 1.27, 1.35, 1.4, 1.53] ,
[1.0, 1.03, 1.12, 1.25, 1.38, 1.47, 1.61] ,
[1.0, 1.02, 1.09, 1.19, 1.33, 1.51, 1.65] ,
[1.0, 1.02, 1.06, 1.12, 1.22, 1.46, 1.77] ,
[1.01, 1.01, 1.04, 1.07, 1.12, 1.26, 1.51] ,
[1.0, 1.05, 1.09, 1.11, 1.14, 1.17, 1.25] ,
[1.01, 1.05, 1.1, 1.12, 1.14, 1.17, 1.24] ,
[1.0, 1.04, 1.1, 1.13, 1.14, 1.18, 1.24] ,
[1.01, 1.04, 1.11, 1.12, 1.14, 1.17, 1.24] ,
[1.0, 1.03, 1.11, 1.13, 1.15, 1.16, 1.25] ,
[1.0, 1.02, 1.07, 1.1, 1.14, 1.21, 1.35] ,
[1.0, 1.04, 1.13, 1.2, 1.23, 1.27, 1.35] ,
[1.0, 1.04, 1.14, 1.24, 1.27, 1.33, 1.42] ,
[1.0, 1.03, 1.12, 1.26, 1.34, 1.41, 1.52] ,
[1.0, 1.03, 1.11, 1.23, 1.38, 1.48, 1.59] ,
[1.0, 1.02, 1.09, 1.18, 1.32, 1.55, 1.67] ,
[1.0, 1.01, 1.06, 1.11, 1.2, 1.47, 1.79] ,
[1.0, 1.01, 1.03, 1.06, 1.1, 1.22, 1.48] ,
[1.0, 1.04, 1.12, 1.16, 1.17, 1.2, 1.27] ,
[1.01, 1.05, 1.13, 1.17, 1.19, 1.22, 1.29] ,
[1.0, 1.04, 1.14, 1.17, 1.18, 1.22, 1.29] ,
[1.0, 1.04, 1.13, 1.16, 1.19, 1.21, 1.28] ,
[1.0, 1.04, 1.12, 1.17, 1.19, 1.21, 1.3] ,
[1.0, 1.04, 1.12, 1.17, 1.2, 1.23, 1.29] ,
[1.0, 1.02, 1.06, 1.1, 1.14, 1.2, 1.34] ,
[1.01, 1.04, 1.15, 1.23, 1.29, 1.33, 1.42] ,
[1.0, 1.03, 1.12, 1.24, 1.33, 1.41, 1.5] ,
[1.0, 1.03, 1.1, 1.21, 1.34, 1.48, 1.57] ,
[1.0, 1.02, 1.07, 1.16, 1.29, 1.53, 1.65] ,
[1.0, 1.02, 1.05, 1.11, 1.18, 1.45, 1.79] ,
[1.0, 1.01, 1.03, 1.05, 1.09, 1.2, 1.45] ,
[1.0, 1.04, 1.14, 1.21, 1.22, 1.27, 1.34] ,
[1.0, 1.04, 1.14, 1.21, 1.22, 1.28, 1.35] ,
[1.0, 1.04, 1.15, 1.22, 1.23, 1.28, 1.36] ,
[1.0, 1.03, 1.14, 1.2, 1.23, 1.27, 1.36] ,
[1.0, 1.04, 1.13, 1.21, 1.23, 1.28, 1.37] ,
[1.0, 1.03, 1.13, 1.21, 1.23, 1.28, 1.37] ,
[1.01, 1.03, 1.11, 1.2, 1.25, 1.29, 1.35] ,
[1.0, 1.02, 1.06, 1.09, 1.13, 1.2, 1.32] ,
[1.0, 1.02, 1.1, 1.21, 1.29, 1.4, 1.52] ,
[1.0, 1.02, 1.08, 1.18, 1.31, 1.48, 1.57] ,
[1.0, 1.02, 1.06, 1.14, 1.26, 1.5, 1.67] ,
[1.0, 1.01, 1.05, 1.09, 1.17, 1.39, 1.8] ,
[1.0, 1.0, 1.03, 1.05, 1.08, 1.15, 1.39] ,
[1.0, 1.04, 1.13, 1.21, 1.28, 1.32, 1.43] ,
[1.0, 1.03, 1.14, 1.23, 1.28, 1.33, 1.43] ,
[1.0, 1.03, 1.13, 1.23, 1.28, 1.34, 1.42] ,
[1.0, 1.03, 1.13, 1.24, 1.31, 1.33, 1.44] ,
[1.0, 1.03, 1.12, 1.23, 1.29, 1.35, 1.43] ,
[1.0, 1.03, 1.11, 1.22, 1.31, 1.34, 1.44] ,
[1.0, 1.03, 1.1, 1.21, 1.29, 1.33, 1.43] ,
[1.0, 1.03, 1.1, 1.19, 1.26, 1.35, 1.45] ,
[1.0, 1.01, 1.04, 1.08, 1.12, 1.17, 1.27] ,
[1.0, 1.02, 1.08, 1.16, 1.26, 1.42, 1.58] ,
[1.0, 1.01, 1.05, 1.11, 1.23, 1.42, 1.63] ,
[1.0, 1.01, 1.03, 1.07, 1.13, 1.31, 1.69] ,
[1.0, 1.01, 1.01, 1.03, 1.05, 1.1, 1.28] ,
[1.0, 1.03, 1.11, 1.22, 1.3, 1.38, 1.47] ,
[1.0, 1.03, 1.11, 1.22, 1.3, 1.37, 1.46] ,
[1.0, 1.03, 1.12, 1.22, 1.31, 1.39, 1.48] ,
[1.0, 1.03, 1.11, 1.23, 1.31, 1.38, 1.48] ,
[1.0, 1.03, 1.1, 1.21, 1.33, 1.4, 1.51] ,
[1.0, 1.03, 1.09, 1.2, 1.31, 1.41, 1.49] ,
[1.0, 1.02, 1.08, 1.18, 1.28, 1.4, 1.48] ,
[1.0, 1.02, 1.07, 1.16, 1.26, 1.39, 1.5] ,
[1.0, 1.02, 1.07, 1.15, 1.23, 1.39, 1.49] ,
[1.0, 1.01, 1.03, 1.07, 1.1, 1.15, 1.22] ,
[1.0, 1.01, 1.04, 1.1, 1.21, 1.36, 1.63] ,
[1.0, 1.01, 1.03, 1.06, 1.11, 1.28, 1.57] ,
[1.0, 1.0, 1.0, 1.02, 1.04, 1.08, 1.2] ,
[1.0, 1.03, 1.08, 1.17, 1.28, 1.42, 1.51] ,
[1.0, 1.02, 1.09, 1.17, 1.29, 1.42, 1.52] ,
[1.0, 1.03, 1.08, 1.17, 1.29, 1.43, 1.53] ,
[1.0, 1.03, 1.08, 1.16, 1.3, 1.42, 1.55] ,
[1.0, 1.02, 1.07, 1.16, 1.28, 1.43, 1.55] ,
[1.0, 1.02, 1.08, 1.15, 1.29, 1.45, 1.58] ,
[1.0, 1.01, 1.07, 1.13, 1.25, 1.45, 1.57] ,
[1.0, 1.01, 1.06, 1.13, 1.22, 1.42, 1.56] ,
[1.0, 1.01, 1.05, 1.11, 1.2, 1.36, 1.55] ,
[1.0, 1.01, 1.04, 1.09, 1.18, 1.32, 1.53] ,
[1.0, 1.01, 1.02, 1.04, 1.07, 1.12, 1.18] ,
[1.0, 1.01, 1.02, 1.05, 1.1, 1.24, 1.46] ,
[1.0, 1.0, 1.0, 1.0, 1.01, 1.04, 1.13] ,
[1.0, 1.02, 1.06, 1.1, 1.22, 1.39, 1.61] ,
[1.0, 1.02, 1.06, 1.11, 1.21, 1.4, 1.61] ,
[1.0, 1.02, 1.06, 1.12, 1.21, 1.4, 1.6] ,
[1.0, 1.02, 1.06, 1.11, 1.21, 1.39, 1.62] ,
[1.01, 1.02, 1.05, 1.11, 1.19, 1.4, 1.65] ,
[1.0, 1.02, 1.05, 1.1, 1.18, 1.41, 1.65] ,
[1.0, 1.01, 1.05, 1.09, 1.16, 1.4, 1.67] ,
[1.0, 1.01, 1.04, 1.08, 1.14, 1.34, 1.67] ,
[1.0, 1.01, 1.03, 1.06, 1.12, 1.29, 1.6] ,
[1.0, 1.01, 1.03, 1.05, 1.1, 1.25, 1.48] ,
[1.0, 1.01, 1.01, 1.04, 1.09, 1.22, 1.39] ,
[1.0, 1.0, 1.01, 1.02, 1.03, 1.08, 1.12] ,
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.04] ,
[1.01, 1.02, 1.04, 1.06, 1.11, 1.23, 1.41] ,
[1.0, 1.01, 1.04, 1.06, 1.11, 1.24, 1.42] ,
[1.0, 1.01, 1.04, 1.07, 1.11, 1.24, 1.42] ,
[1.0, 1.01, 1.04, 1.07, 1.12, 1.23, 1.42] ,
[1.0, 1.01, 1.03, 1.06, 1.11, 1.23, 1.43] ,
[1.0, 1.01, 1.03, 1.06, 1.1, 1.2, 1.42] ,
[1.0, 1.01, 1.03, 1.05, 1.08, 1.17, 1.39] ,
[1.0, 1.01, 1.02, 1.04, 1.06, 1.13, 1.34] ,
[1.0, 1.0, 1.01, 1.03, 1.05, 1.09, 1.25] ,
[1.0, 1.0, 1.01, 1.02, 1.03, 1.07, 1.18] ,
[1.0, 1.0, 1.0, 1.0, 1.02, 1.04, 1.12] ,
[1.0, 1.0, 1.0, 1.0, 1.0, 1.01, 1.04] ,
[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0] ]


#两人情况下对应赢率的手牌范围
#每行三个数值：赢率，两人情况下平均赢率小于该值的手牌在所有手牌中的占比，大于该值时的占比
g_resWrtoRange=[ #res
[0.010000,0.000000,1.000000],
[0.020000,0.000000,1.000000],
[0.030000,0.000000,1.000000],
[0.040000,0.000000,1.000000],
[0.050000,0.000000,1.000000],
[0.060000,0.000000,1.000000],
[0.070000,0.000000,1.000000],
[0.080000,0.000000,1.000000],
[0.090000,0.000000,1.000000],
[0.100000,0.000000,1.000000],
[0.110000,0.000000,1.000000],
[0.120000,0.000000,1.000000],
[0.130000,0.000000,1.000000],
[0.140000,0.000000,1.000000],
[0.150000,0.000000,1.000000],
[0.160000,0.000000,1.000000],
[0.170000,0.000000,1.000000],
[0.180000,0.000000,1.000000],
[0.190000,0.000000,1.000000],
[0.200000,0.000000,1.000000],
[0.210000,0.000000,1.000000],
[0.220000,0.000000,1.000000],
[0.230000,0.000000,1.000000],
[0.240000,0.000000,1.000000],
[0.250000,0.000000,1.000000],
[0.260000,0.000000,1.000000],
[0.270000,0.000000,1.000000],
[0.280000,0.000000,1.000000],
[0.290000,0.000000,1.000000],
[0.300000,0.000000,1.000000],
[0.310000,0.000000,1.000000],
[0.320000,0.000000,1.000000],
[0.330000,0.009050,0.990950],
[0.340000,0.018100,0.981900],
[0.350000,0.045249,0.954751],
[0.360000,0.057315,0.942685],
[0.370000,0.096531,0.903469],
[0.380000,0.111614,0.888386],
[0.390000,0.144796,0.855204],
[0.400000,0.177979,0.822021],
[0.410000,0.214178,0.785822],
[0.420000,0.241327,0.758673],
[0.430000,0.274510,0.725490],
[0.440000,0.304676,0.695324],
[0.450000,0.337858,0.662142],
[0.460000,0.365008,0.634992],
[0.470000,0.398190,0.601810],
[0.480000,0.446456,0.553544],
[0.490000,0.470588,0.529412],
[0.500000,0.506787,0.493213],
[0.510000,0.541478,0.458522],
[0.520000,0.592760,0.407240],
[0.530000,0.610860,0.389140],
[0.540000,0.648567,0.351433],
[0.550000,0.681750,0.318250],
[0.560000,0.723982,0.276018],
[0.570000,0.748115,0.251885],
[0.580000,0.800905,0.199095],
[0.590000,0.825038,0.174962],
[0.600000,0.858220,0.141780],
[0.610000,0.886878,0.113122],
[0.620000,0.901961,0.098039],
[0.630000,0.917044,0.082956],
[0.640000,0.933635,0.066365],
[0.650000,0.945701,0.054299],
[0.660000,0.957768,0.042232],
[0.670000,0.965309,0.034691],
[0.680000,0.968326,0.031674],
[0.690000,0.968326,0.031674],
[0.700000,0.972851,0.027149],
[0.710000,0.972851,0.027149],
[0.720000,0.972851,0.027149],
[0.730000,0.977376,0.022624],
[0.740000,0.977376,0.022624],
[0.750000,0.977376,0.022624],
[0.760000,0.981900,0.018100],
[0.770000,0.981900,0.018100],
[0.780000,0.986425,0.013575],
[0.790000,0.986425,0.013575],
[0.800000,0.990950,0.009050],
[0.810000,0.990950,0.009050],
[0.820000,0.990950,0.009050],
[0.830000,0.995475,0.004525],
[0.840000,0.995475,0.004525],
[0.850000,0.995475,0.004525],
[0.860000,1.000000,0.000000],
[0.870000,1.000000,0.000000],
[0.880000,1.000000,0.000000],
[0.890000,1.000000,0.000000],
[0.900000,1.000000,0.000000],
[0.910000,1.000000,0.000000],
[0.920000,1.000000,0.000000],
[0.930000,1.000000,0.000000],
[0.940000,1.000000,0.000000],
[0.950000,1.000000,0.000000],
[0.960000,1.000000,0.000000],
[0.970000,1.000000,0.000000],
[0.980000,1.000000,0.000000],
[0.990000,1.000000,0.000000],
[1.000000,1.000000,0.000000]]


#翻牌前两张牌情况下，赢率对应的手牌的值，手牌的值从1-1326种均匀的映射到了0-1上。
g_WrwithHands= [[0.323032, 0.00830188679245283], [0.3319975, 0.017358490566037735], 
[0.340752, 0.026415094339622643], [0.3428465, 0.03547169811320755], 
[0.34583650000000005, 0.04452830188679245], [0.35145899999999997, 0.05358490566037736], 
[0.3598445, 0.05660377358490566], [0.3607765, 0.06566037735849056], 
[0.362648, 0.07471698113207548], [0.36602250000000003, 0.08377358490566038], 
[0.3682765, 0.09283018867924528], [0.3682895, 0.09584905660377359], 
[0.3748375, 0.10490566037735849], [0.376689, 0.1079245283018868], 
[0.378493, 0.1109433962264151], [0.380105, 0.12], [0.3815525, 0.1290566037735849], 
[0.38155849999999997, 0.1320754716981132], [0.385498, 0.14113207547169812], 
[0.38642, 0.14415094339622642], [0.39097899999999997, 0.15320754716981133], 
[0.394468, 0.16226415094339622], [0.3953355, 0.16528301886792454],
[0.39693, 0.16830188679245284], [0.3994435, 0.17735849056603772], 
[0.40019499999999997, 0.18641509433962264], [0.40036, 0.18943396226415093], 
[0.402716, 0.19245283018867926], [0.40512, 0.20150943396226415],
[0.4067105, 0.21056603773584906], [0.4087355, 0.21358490566037736], 
[0.41333349999999996, 0.21660377358490565], [0.4142755, 0.22566037735849057], 
[0.41453399999999996, 0.22867924528301886], [0.4166835, 0.23773584905660378], 
[0.418493, 0.24075471698113207], [0.4232275, 0.249811320754717], 
[0.424152, 0.2528301886792453], [0.42594550000000003, 0.2618867924528302], 
[0.426691, 0.2709433962264151], [0.4270165, 0.2739622641509434], 
[0.431334, 0.2769811320754717], [0.432409, 0.2860377358490566], 
[0.4326425, 0.2890566037735849], [0.43504099999999996, 0.2981132075471698], 
[0.43675549999999996, 0.3011320754716981], [0.43861950000000005, 0.3041509433962264], 
[0.4425095, 0.3132075471698113], [0.443485, 0.3222641509433962],
[0.4449135, 0.33132075471698114], [0.44545049999999997, 0.33433962264150946],
[0.448395, 0.3373584905660377], [0.450508, 0.34641509433962264], 
[0.452756, 0.35547169811320756], [0.45371799999999995, 0.3584905660377358],
[0.4569255, 0.36150943396226415], [0.45721849999999997, 0.36452830188679247],
[0.46092, 0.37358490566037733], [0.4618635, 0.38264150943396225],
[0.46243249999999997, 0.38566037735849057], [0.46297849999999996, 0.3947169811320755], 
[0.465305, 0.39773584905660375], [0.4718085, 0.40679245283018867],
[0.47216250000000004, 0.409811320754717], [0.47295400000000004, 0.4188679245283019],
[0.473781, 0.4218867924528302], [0.474283, 0.4249056603773585], 
[0.4784425, 0.4339622641509434], [0.4790815, 0.4430188679245283],
[0.4793635, 0.4460377358490566], [0.48097, 0.4550943396226415],
[0.4821945, 0.4641509433962264], [0.4823165, 0.4671698113207547],
[0.489407, 0.470188679245283], [0.490705, 0.47320754716981134],
[0.4911775, 0.4762264150943396], [0.491277, 0.4852830188679245],
[0.496819, 0.49433962264150944], [0.4972125, 0.5033962264150943], 
[0.499868, 0.5064150943396226], [0.501201, 0.5154716981132076],
[0.50169, 0.5184905660377358], [0.5033405, 0.5230188679245283], 
[0.5050875, 0.5320754716981132], [0.5060585, 0.5350943396226415], 
[0.50639, 0.5381132075471698], [0.508008, 0.5411320754716981], 
[0.5101924999999999, 0.5441509433962264], [0.5102405, 0.5532075471698114], 
[0.5142575, 0.5622641509433962], [0.514902, 0.5713207547169812], 
[0.515317, 0.580377358490566], [0.517657, 0.5894339622641509], 
[0.5185525, 0.5924528301886792], [0.523248, 0.5954716981132075],
[0.523275, 0.6045283018867924], [0.523343, 0.6075471698113207],
[0.5276945, 0.610566037735849], [0.532118, 0.6135849056603774], 
[0.532512, 0.6226415094339622], [0.5331395, 0.6316981132075472], 
[0.5359975, 0.6407547169811321], [0.5361250000000001, 0.6437735849056604], 
[0.5369305, 0.6483018867924528], [0.540157, 0.6513207547169811],
[0.5402755, 0.6543396226415095], [0.5405495, 0.6573584905660378],
[0.5422325, 0.6664150943396226], [0.543023, 0.669433962264151],
[0.5488460000000001, 0.6724528301886793], [0.5492855, 0.6815094339622642],
[0.5518730000000001, 0.690566037735849], [0.552477, 0.699622641509434],
[0.5536044999999999, 0.7086792452830188], [0.556625, 0.7116981132075472],
[0.5579295, 0.7147169811320755], [0.558446, 0.7237735849056603],
[0.560177, 0.7267924528301887], [0.5602015, 0.7358490566037735],
[0.5664075, 0.7388679245283019], [0.5672969999999999, 0.7479245283018868],
[0.570228, 0.7524528301886793], [0.572908, 0.7615094339622641],
[0.5737895, 0.7645283018867924], [0.5752790000000001, 0.7675471698113208],
[0.575377, 0.7705660377358491], [0.5766435, 0.7735849056603774],
[0.5768245, 0.7826415094339623], [0.5769655, 0.7916981132075471],
[0.578119, 0.8007547169811321], [0.5813465, 0.809811320754717],
[0.5822035000000001, 0.8128301886792453], [0.5831235, 0.8158490566037736],
[0.5884119999999999, 0.8249056603773585], [0.5903365, 0.8279245283018868],
[0.594675, 0.8309433962264151], [0.5973895, 0.84], [0.5987264999999999, 0.8490566037735849],
[0.5990585, 0.8520754716981133], [0.599229, 0.8550943396226415],
[0.5998845, 0.8581132075471698], [0.6025925000000001, 0.8611320754716981], 
[0.603249, 0.8656603773584906], [0.6056865, 0.8747169811320755], 
[0.6077275000000001, 0.8837735849056604], [0.60984, 0.8867924528301887], 
[0.6145585, 0.8958490566037736], [0.617886, 0.8988679245283019], 
[0.619438, 0.9018867924528302], [0.6256740000000001, 0.9049056603773585], 
[0.6272165000000001, 0.9139622641509434], [0.6278125, 0.9169811320754717], 
[0.632847, 0.9215094339622641], [0.634004, 0.9245283018867925], 
[0.635633, 0.9335849056603773], [0.6443185, 0.9426415094339623], 
[0.6460235000000001, 0.9456603773584905], [0.653201, 0.9547169811320755], 
[0.6539265, 0.9577358490566038], [0.6620885, 0.9607547169811321], 
[0.6623605, 0.9652830188679246], [0.670446, 0.9683018867924529], 
[0.6916304999999999, 0.9728301886792453], [0.720573, 0.9773584905660377], 
[0.7501180000000001, 0.9818867924528302], [0.774695, 0.9864150943396226], 
[0.7992515, 0.9909433962264151], [0.8239565000000001, 0.9954716981132076], [0.852037, 1.0]]


#翻牌前两张牌情况下,手牌的值从1-1326种均匀的映射到了0-1上的实数光滑后关于赢率的导数
#计算来自：testDistwrofuniformcards()
g_derivHandsvsWr=[[0.330013,2.793983],[0.330285,2.793983],[0.330554,2.819626],[0.330820,2.847754],
[0.331084,2.877792],[0.331344,2.909242],[0.331602,2.941668],[0.331858,2.974677],[0.332110,2.989327],
[0.332363,2.980724],[0.332616,2.969302],[0.332871,2.960806],[0.333126,2.954519],[0.333382,2.949830],
[0.333638,2.946208],[0.333894,2.943191],[0.334151,2.940369],[0.334407,2.937374],[0.334664,2.933875],
[0.334922,2.929570],[0.335180,2.898475],[0.335443,2.835791],[0.335712,2.770331],[0.335988,2.709760],
[0.336269,2.653059],[0.336556,2.599385],[0.336850,2.548033],[0.337149,2.498409],[0.337454,2.450011],
[0.337765,2.402410],[0.338082,2.355237],[0.338406,2.308178],[0.338736,2.240757],[0.339079,2.150953],
[0.339438,2.061689],[0.339812,1.978461],[0.340201,1.898597],[0.340607,1.821146],[0.341030,1.747177],
[0.341471,1.684942],[0.341926,1.658021],[0.342381,1.657932],[0.342836,1.661131],[0.343290,1.667659],
[0.343741,1.677592],[0.344189,1.691053],[0.344634,1.708209],[0.345073,1.729282],[0.345507,1.751862],
[0.345935,1.775212],[0.346357,1.802300],[0.346772,1.829690],[0.347182,1.842550],[0.347591,1.844573],
[0.348000,1.849915],[0.348407,1.858632],[0.348812,1.870819],[0.349214,1.886614],[0.349612,1.906195],
[0.350006,1.929792],[0.350394,1.951667],[0.350779,1.969822],[0.351161,1.990472],[0.351538,2.010330],
[0.351912,2.012068],[0.352288,2.000551],[0.352666,1.992334],[0.353046,1.987338],[0.353426,1.985514],
[0.353806,1.986845],[0.354185,1.991343],[0.354564,1.999053],[0.354940,2.005802],[0.355316,2.010277],
[0.355691,2.016867],[0.356065,2.025716],[0.356436,2.032695],[0.356807,2.038998],[0.357177,2.048713],
[0.357544,2.061936],[0.357909,2.078803],[0.358270,2.099489],[0.358628,2.124215],[0.358981,2.153256],
[0.359329,2.186914],[0.359671,2.225581],[0.360007,2.269770],[0.360336,2.317538],[0.360658,2.344217],
[0.360980,2.345512],[0.361302,2.346175],[0.361623,2.351903],[0.361944,2.362772],[0.362262,2.378924],
[0.362578,2.400575],[0.362891,2.428021],[0.363200,2.461651],[0.363504,2.501958],[0.363803,2.549557],
[0.364096,2.599211],[0.364384,2.626124],[0.364671,2.632537],[0.364957,2.642512],[0.365242,2.658193],
[0.365525,2.673742],[0.365807,2.687303],[0.366087,2.705173],[0.366365,2.729642],[0.366640,2.755333],
[0.366912,2.780534],[0.367182,2.811347],[0.367449,2.839490],[0.367714,2.831921],[0.367982,2.798491],
[0.368253,2.770755],[0.368527,2.747287],[0.368803,2.724539],[0.369081,2.703452],[0.369361,2.687097],
[0.369643,2.675310],[0.369925,2.663167],[0.370210,2.649236],[0.370495,2.638435],[0.370782,2.632268],
[0.371069,2.630672],[0.371355,2.633630],[0.371642,2.641172],[0.371927,2.651302],[0.372211,2.657678],
[0.372495,2.662125],[0.372778,2.670848],[0.373060,2.683930],[0.373340,2.701480],[0.373619,2.723663],
[0.373895,2.750728],[0.374168,2.782962],[0.374437,2.806145],[0.374705,2.815366],[0.374973,2.825460],
[0.375240,2.837161],[0.375505,2.837326],[0.375772,2.829779],[0.376039,2.827190],[0.376306,2.829530],
[0.376572,2.836826],[0.376838,2.849153],[0.377102,2.866643],[0.377364,2.889485],[0.377624,2.914269],
[0.377882,2.939954],[0.378138,2.970501],[0.378390,3.004305],[0.378640,3.012076],[0.378891,2.990482],
[0.379145,2.969190],[0.379400,2.954456],[0.379656,2.946089],[0.379912,2.943983],[0.380168,2.948111],
[0.380424,2.958524],[0.380679,2.975358],[0.380931,2.998831],[0.381182,3.029256],[0.381430,3.067027],
[0.381674,3.096903],[0.381917,3.113603],[0.382159,3.133212],[0.382399,3.151039],[0.382638,3.135608],
[0.382880,3.096765],[0.383125,3.064697],[0.383373,3.039012],[0.383622,3.019407],[0.383873,3.005654],
[0.384124,2.997597],[0.384376,2.995146],[0.384628,2.994633],[0.384880,2.994952],[0.385132,2.999870],
[0.385383,3.008027],[0.385634,3.004603],[0.385886,2.990004],[0.386139,2.978993],[0.386393,2.971203],
[0.386647,2.948686],[0.386904,2.911253],[0.387165,2.876963],[0.387429,2.846779],[0.387696,2.814289],
[0.387965,2.781438],[0.388238,2.753980],[0.388514,2.731616],[0.388791,2.714113],[0.389070,2.701291],
[0.389350,2.693020],[0.389630,2.689218],[0.389911,2.687309],[0.390192,2.686515],[0.390473,2.689457],
[0.390753,2.695362],[0.391033,2.699166],[0.391312,2.702349],[0.391591,2.709864],[0.391869,2.721785],
[0.392146,2.738227],[0.392421,2.759353],[0.392693,2.785377],[0.392963,2.816569],[0.393229,2.852634],
[0.393492,2.893727],[0.393750,2.940936],[0.394005,2.995031],[0.394254,3.046417],[0.394500,3.091519],
[0.394743,3.140913],[0.394981,3.192402],[0.395216,3.214536],[0.395451,3.208313],[0.395686,3.204595],
[0.395922,3.207260],[0.396157,3.216340],[0.396391,3.231944],[0.396624,3.254263],[0.396855,3.283573],
[0.397083,3.320246],[0.397309,3.364763],[0.397532,3.417728],[0.397751,3.478129],[0.397966,3.531788],
[0.398178,3.576762],[0.398388,3.628038],[0.398594,3.679763],[0.398798,3.701491],[0.399002,3.700981],
[0.399206,3.707302],[0.399409,3.720522],[0.399612,3.740789],[0.399813,3.768334],[0.400012,3.803476],
[0.400210,3.846631],[0.400405,3.884001],[0.400598,3.910820],[0.400791,3.941776],[0.400981,3.973408],
[0.401171,3.945152],[0.401364,3.857166],[0.401562,3.771194],[0.401764,3.697112],[0.401970,3.627948],
[0.402180,3.561619],[0.402394,3.503531],[0.402611,3.454772],[0.402831,3.414644],[0.403053,3.382594],
[0.403277,3.358194],[0.403503,3.339599],[0.403729,3.321991],[0.403957,3.306688],[0.404186,3.298031],
[0.404415,3.293187],[0.404644,3.282494],[0.404874,3.268090],[0.405106,3.259287],[0.405338,3.252229],
[0.405570,3.223673],[0.405806,3.175257],[0.406045,3.130296],[0.406288,3.091796],[0.406533,3.059330],
[0.406781,3.032547],[0.407031,3.011167],[0.407283,2.994972],[0.407535,2.983800],[0.407789,2.977539],
[0.408042,2.976128],[0.408296,2.978503],[0.408549,2.973953],[0.408803,2.961225],[0.409059,2.951161],
[0.409315,2.946182],[0.409571,2.927160],[0.409830,2.889014],[0.410093,2.851705],[0.410360,2.821135],
[0.410629,2.796904],[0.410899,2.778702],[0.411172,2.766301],[0.411445,2.759351],[0.411719,2.757164],
[0.411992,2.759897],[0.412266,2.768169],[0.412538,2.779208],[0.412809,2.780883],[0.413081,2.774724],
[0.413353,2.772680],[0.413625,2.772937],[0.413897,2.760181],[0.414172,2.735415],[0.414449,2.713857],
[0.414728,2.697422],[0.415009,2.685931],[0.415290,2.679260],[0.415572,2.677337],[0.415854,2.680142],
[0.416135,2.687705],[0.416415,2.700107],[0.416694,2.717482],[0.416971,2.738138],[0.417245,2.753728],
[0.417519,2.764989],[0.417791,2.780315],[0.418062,2.800763],[0.418330,2.826556],[0.418596,2.857984],
[0.418858,2.895409],[0.419117,2.939280],[0.419372,2.990143],[0.419622,3.048662],[0.419867,3.115643],
[0.420106,3.188811],[0.420340,3.256805],[0.420570,3.321393],[0.420795,3.394659],[0.421015,3.469462],
[0.421230,3.493291],[0.421447,3.464497],[0.421666,3.434859],[0.421886,3.410614],[0.422108,3.380569],
[0.422333,3.344826],[0.422559,3.314266],[0.422788,3.290459],[0.423018,3.273129],[0.423249,3.262074],
[0.423481,3.257171],[0.423713,3.258362],[0.423944,3.265663],[0.424175,3.279155],[0.424404,3.298992],
[0.424632,3.324953],[0.424858,3.354688],[0.425082,3.388431],[0.425304,3.429152],[0.425523,3.473686],
[0.425738,3.495709],[0.425954,3.493917],[0.426170,3.494599],[0.426386,3.502392],[0.426601,3.517393],
[0.426815,3.539786],[0.427028,3.569854],[0.427238,3.607983],[0.427446,3.654678],[0.427651,3.710578],
[0.427853,3.776482],[0.428051,3.849142],[0.428245,3.903516],[0.428438,3.938145],[0.428628,3.978254],
[0.428817,4.016464],[0.429004,4.001428],[0.429194,3.940640],[0.429387,3.884583],[0.429583,3.837257],
[0.429781,3.772044],[0.429983,3.683293],[0.430190,3.598578],[0.430402,3.525239],[0.430619,3.462128],
[0.430838,3.408310],[0.431061,3.363026],[0.431287,3.324052],[0.431516,3.286163],[0.431747,3.250701],
[0.431980,3.222015],[0.432215,3.196874],[0.432452,3.161851],[0.432692,3.118729],[0.432936,3.080570],
[0.433182,3.048482],[0.433431,3.022117],[0.433682,3.001195],[0.433934,2.985499],[0.434187,2.974870],
[0.434442,2.969201],[0.434696,2.968437],[0.434950,2.972569],[0.435204,2.980594],[0.435456,2.983400],
[0.435710,2.980097],[0.435963,2.979918],[0.436216,2.984868],[0.436469,2.994998],[0.436720,3.010413],
[0.436970,3.031277],[0.437218,3.057814],[0.437464,3.090317],[0.437707,3.129154],[0.437946,3.174781],
[0.438182,3.227220],[0.438414,3.282683],[0.438642,3.341057],[0.438866,3.407324],[0.439085,3.475094],
[0.439300,3.501429],[0.439516,3.486780],[0.439733,3.473163],[0.439950,3.464090],[0.440169,3.441554],
[0.440389,3.404367],[0.440612,3.370694],[0.440837,3.344073],[0.441063,3.324186],[0.441291,3.310800],
[0.441519,3.303761],[0.441748,3.302987],[0.441976,3.308472],[0.442204,3.320276],[0.442431,3.338536],
[0.442656,3.363049],[0.442880,3.380739],[0.443103,3.388102],[0.443325,3.398751],[0.443547,3.412470],
[0.443768,3.415762],[0.443989,3.412525],[0.444210,3.415823],[0.444431,3.425693],[0.444650,3.442249],
[0.444869,3.465686],[0.445086,3.496284],[0.445301,3.534415],[0.445513,3.574807],[0.445723,3.615799],
[0.445931,3.663630],[0.446135,3.717167],[0.446337,3.743957],[0.446538,3.739852],[0.446740,3.737604],
[0.446942,3.740168],[0.447144,3.733053],[0.447346,3.719449],[0.447550,3.713407],[0.447753,3.707041],
[0.447957,3.651594],[0.448166,3.551693],[0.448382,3.457097],[0.448603,3.374029],[0.448829,3.301196],
[0.449060,3.237535],[0.449295,3.182172],[0.449534,3.134383],[0.449777,3.093574],[0.450022,3.059256],
[0.450270,3.031035],[0.450520,3.007201],[0.450772,2.979442],[0.451027,2.948024],[0.451284,2.920949],
[0.451544,2.899247],[0.451805,2.882690],[0.452067,2.871107],[0.452331,2.864380],[0.452594,2.862442],
[0.452858,2.865273],[0.453121,2.872901],[0.453383,2.885404],[0.453644,2.901012],[0.453904,2.911696],
[0.454163,2.918385],[0.454421,2.929086],[0.454678,2.944665],[0.454933,2.963035],[0.455187,2.983609],
[0.455439,3.008860],[0.455689,3.039815],[0.455936,3.076815],[0.456180,3.120283],[0.456420,3.170734],
[0.456656,3.227909],[0.456887,3.289643],[0.457115,3.357206],[0.457337,3.434130],[0.457554,3.515777],
[0.457766,3.570295],[0.457977,3.596125],[0.458186,3.624539],[0.458393,3.656101],[0.458599,3.636480],
[0.458808,3.559382],[0.459023,3.481218],[0.459242,3.414253],[0.459465,3.357395],[0.459692,3.309768],
[0.459921,3.270667],[0.460153,3.239537],[0.460387,3.215951],[0.460622,3.199591],[0.460859,3.190241],
[0.461096,3.184182],[0.461333,3.168762],[0.461572,3.146909],[0.461812,3.130819],[0.462054,3.120861],
[0.462296,3.113333],[0.462539,3.107115],[0.462782,3.105874],[0.463025,3.110808],[0.463267,3.121974],
[0.463508,3.139507],[0.463748,3.163623],[0.463985,3.193074],[0.464221,3.223314],[0.464454,3.255819],
[0.464684,3.295584],[0.464912,3.337478],[0.465137,3.359632],[0.465361,3.365065],[0.465585,3.375100],
[0.465808,3.390786],[0.466030,3.407908],[0.466251,3.426160],[0.466471,3.450084],[0.466689,3.473816],
[0.466905,3.452287],[0.467126,3.386402],[0.467351,3.321864],[0.467580,3.265642],[0.467813,3.217019],
[0.468050,3.175405],[0.468289,3.140312],[0.468530,3.111344],[0.468774,3.088185],[0.469019,3.070587],
[0.469265,3.058366],[0.469513,3.050011],[0.469760,3.038479],[0.470009,3.024238],[0.470259,3.014158],
[0.470510,3.009071],[0.470761,3.008925],[0.471012,3.013720],[0.471262,3.023503],[0.471511,3.038371],
[0.471759,3.058474],[0.472004,3.084018],[0.472248,3.115271],[0.472489,3.151678],[0.472727,3.189439],
[0.472962,3.229046],[0.473194,3.274909],[0.473423,3.327064],[0.473648,3.374464],[0.473870,3.414873],
[0.474090,3.460040],[0.474307,3.513432],[0.474520,3.575761],[0.474729,3.647903],[0.474934,3.730923],
[0.475133,3.826126],[0.475328,3.935112],[0.475517,4.059850],[0.475700,4.202787],[0.475876,4.360001],
[0.476046,4.498996],[0.476212,4.618446],[0.476373,4.752106],[0.476529,4.881996],[0.476682,4.929303],
[0.476836,4.911287],[0.476989,4.901284],[0.477144,4.899198],[0.477298,4.905007],[0.477451,4.918769],
[0.477604,4.940618],[0.477757,4.970769],[0.477908,5.008094],[0.478058,5.052468],[0.478207,5.105790],
[0.478354,5.167626],[0.478499,5.144666],[0.478647,5.014971],[0.478800,4.877991],[0.478957,4.757801],
[0.479117,4.631178],[0.479283,4.498137],[0.479453,4.379362],[0.479627,4.276948],[0.479806,4.185178],
[0.479988,4.101867],[0.480174,4.029946],[0.480362,3.969569],[0.480554,3.919102],[0.480748,3.877645],
[0.480943,3.845380],[0.481140,3.820194],[0.481338,3.796054],[0.481538,3.774599],[0.481738,3.761200],
[0.481939,3.754573],[0.482140,3.751231],[0.482341,3.752158],[0.482542,3.760676],[0.482743,3.767552],
[0.482943,3.708428],[0.483150,3.586789],[0.483364,3.469350],[0.483585,3.365933],[0.483812,3.274727],
[0.484046,3.194256],[0.484285,3.123307],[0.484529,3.060879],[0.484778,3.006145],[0.485031,2.958413],
[0.485288,2.917114],[0.485549,2.880937],[0.485812,2.845550],[0.486079,2.811204],[0.486349,2.781630],
[0.486622,2.757026],[0.486897,2.737145],[0.487173,2.721793],[0.487451,2.710822],[0.487730,2.704127],
[0.488009,2.701646],[0.488289,2.703357],[0.488568,2.709274],[0.488846,2.719125],[0.489123,2.722749],
[0.489400,2.717606],[0.489678,2.714175],[0.489956,2.713663],[0.490235,2.705784],[0.490514,2.690948],
[0.490795,2.679356],[0.491078,2.672428],[0.491360,2.670093],[0.491643,2.672325],[0.491925,2.679149],
[0.492206,2.690634],[0.492486,2.706900],[0.492764,2.728121],[0.493039,2.754526],[0.493312,2.784910],
[0.493581,2.813017],[0.493849,2.839531],[0.494113,2.870991],[0.494374,2.908366],[0.494632,2.945387],
[0.494887,2.979909],[0.495139,3.018972],[0.495387,3.065347],[0.495631,3.119667],[0.495871,3.182711],
[0.496105,3.246804],[0.496336,3.308990],[0.496561,3.377828],[0.496782,3.457505],[0.496998,3.550090],
[0.497208,3.642485],[0.497412,3.687102],[0.497617,3.693986],[0.497821,3.707705],[0.498024,3.725567],
[0.498226,3.738904],[0.498428,3.750208],[0.498629,3.761601],[0.498829,3.770063],[0.499029,3.778991],
[0.499228,3.791553],[0.499427,3.808778],[0.499625,3.829871],[0.499821,3.856626],[0.500016,3.890280],
[0.500209,3.920253],[0.500401,3.942788],[0.500592,3.969901],[0.500781,4.005868],[0.500969,4.034480],
[0.501156,4.050317],[0.501342,4.070483],[0.501526,4.100892],[0.501710,4.141618],[0.501891,4.177834],
[0.502071,4.162779],[0.502253,4.110920],[0.502438,4.067351],[0.502625,4.031587],[0.502812,4.003242],
[0.503002,3.982015],[0.503192,3.967687],[0.503382,3.960111],[0.503573,3.959210],[0.503763,3.964975],
[0.503953,3.947991],[0.504146,3.899204],[0.504340,3.846661],[0.504538,3.800643],[0.504738,3.763337],
[0.504939,3.734262],[0.505142,3.713054],[0.505346,3.699453],[0.505550,3.693294],[0.505754,3.694502],
[0.505958,3.703093],[0.506162,3.719170],[0.506364,3.738714],[0.506566,3.754625],[0.506766,3.753075],
[0.506968,3.740789],[0.507170,3.735210],[0.507372,3.733344],[0.507574,3.726218],[0.507777,3.716502],
[0.507980,3.712804],[0.508184,3.715088],[0.508387,3.723375],[0.508589,3.737747],[0.508790,3.755607],
[0.508991,3.776214],[0.509190,3.802553],[0.509388,3.835823],[0.509584,3.876381],[0.509777,3.923487],
[0.509968,3.973855],[0.510157,4.028822],[0.510343,4.092540],[0.510526,4.161263],[0.510706,4.221142],
[0.510883,4.275589],[0.511059,4.318097],[0.511233,4.341644],[0.511406,4.367049],[0.511579,4.396182],
[0.511750,4.412690],[0.511921,4.421128],[0.512091,4.437416],[0.512261,4.461728],[0.512430,4.494328],
[0.512597,4.535575],[0.512762,4.585936],[0.512926,4.645997],[0.513087,4.707195],[0.513247,4.766667],
[0.513404,4.834309],[0.513559,4.910471],[0.513711,4.930282],[0.513865,4.879752],[0.514021,4.825664],
[0.514178,4.783988],[0.514336,4.750211],[0.514496,4.724977],[0.514656,4.711748],[0.514816,4.704763],
[0.514976,4.686736],[0.515138,4.662905],[0.515300,4.649736],[0.515463,4.639622],[0.515625,4.609988],
[0.515790,4.568035],[0.515956,4.535338],[0.516123,4.511362],[0.516290,4.494727],[0.516459,4.485216],
[0.516627,4.483851],[0.516795,4.490833],[0.516963,4.465329],[0.517133,4.396463],[0.517306,4.327178],
[0.517482,4.270089],[0.517660,4.187757],[0.517843,4.072695],[0.518031,3.963701],[0.518223,3.861264],
[0.518421,3.734947],[0.518628,3.596448],[0.518841,3.474065],[0.519062,3.366269],[0.519290,3.271131],
[0.519523,3.187080],[0.519763,3.112826],[0.520008,3.047309],[0.520259,2.989646],[0.520513,2.939107],
[0.520772,2.895082],[0.521035,2.856233],[0.521301,2.817393],[0.521570,2.778621],[0.521844,2.744498],
[0.522120,2.715452],[0.522400,2.691188],[0.522681,2.671465],[0.522965,2.656095],[0.523250,2.644931],
[0.523535,2.637871],[0.523822,2.634848],[0.524108,2.635836],[0.524394,2.640387],[0.524680,2.637808],
[0.524967,2.625748],[0.525255,2.615190],[0.525544,2.609164],[0.525833,2.607608],[0.526123,2.610506],
[0.526411,2.617887],[0.526699,2.629828],[0.526985,2.646454],[0.527270,2.667942],[0.527551,2.694524],
[0.527830,2.723757],[0.528105,2.746789],[0.528379,2.765688],[0.528651,2.789232],[0.528920,2.817813],
[0.529187,2.848674],[0.529450,2.880995],[0.529711,2.918164],[0.529968,2.961645],[0.530220,3.011963],
[0.530469,3.069758],[0.530712,3.121045],[0.530952,3.159067],[0.531190,3.194240],[0.531425,3.232974],
[0.531657,3.279403],[0.531885,3.325755],[0.532111,3.347015],[0.532336,3.349871],[0.532561,3.357357],
[0.532786,3.369043],[0.533009,3.386387],[0.533232,3.410109],[0.533452,3.431340],[0.533671,3.447142],
[0.533890,3.467105],[0.534107,3.494612],[0.534322,3.530018],[0.534534,3.573794],[0.534744,3.626541],
[0.534951,3.689015],[0.535153,3.762151],[0.535352,3.846944],[0.535546,3.944284],[0.535735,4.055967],
[0.535918,4.178141],[0.536096,4.297350],[0.536269,4.379194],[0.536440,4.433575],[0.536610,4.444713],
[0.536780,4.382489],[0.536954,4.265139],[0.537134,4.127549],[0.537320,4.003746],[0.537511,3.890169],
[0.537708,3.786030],[0.537910,3.692041],[0.538117,3.609507],[0.538328,3.537212],[0.538543,3.474150],
[0.538762,3.419492],[0.538985,3.372554],[0.539210,3.332772],[0.539438,3.299687],[0.539667,3.272927],
[0.539899,3.239466],[0.540133,3.194958],[0.540371,3.149695],[0.540613,3.108589],[0.540857,3.074134],
[0.541104,3.045925],[0.541352,3.023638],[0.541603,3.007026],[0.541854,2.995906],[0.542107,2.990160],
[0.542359,2.989724],[0.542611,2.994596],[0.542863,3.002280],[0.543114,3.007958],[0.543365,3.001765],
[0.543617,2.988311],[0.543870,2.979600],[0.544124,2.975549],[0.544377,2.976121],[0.544631,2.981321],
[0.544884,2.991197],[0.545135,3.005844],[0.545386,3.025400],[0.545634,3.050056],[0.545881,3.075066],
[0.546125,3.098709],[0.546368,3.125622],[0.546608,3.157922],[0.546846,3.196537],[0.547080,3.240577],
[0.547312,3.286246],[0.547540,3.334903],[0.547764,3.391078],[0.547985,3.455467],[0.548201,3.528907],
[0.548413,3.605780],[0.548620,3.646410],[0.548826,3.648649],[0.549033,3.651486],[0.549240,3.661050],
[0.549446,3.668450],[0.549651,3.671392],[0.549857,3.679109],[0.550062,3.693877],[0.550265,3.710716],
[0.550468,3.729200],[0.550670,3.754692],[0.550870,3.784841],[0.551069,3.808036],[0.551267,3.827509],
[0.551463,3.854791],[0.551658,3.890214],[0.551851,3.934219],[0.552042,3.987371],[0.552230,4.050379],
[0.552415,4.124118],[0.552596,4.195380],[0.552774,4.259303],[0.552950,4.330727],[0.553123,4.413202],
[0.553292,4.499887],[0.553458,4.593389],[0.553621,4.702765],[0.553779,4.808794],[0.553935,4.843752],
[0.554091,4.823644],[0.554248,4.812009],[0.554405,4.807123],[0.554562,4.804038],[0.554719,4.804189],
[0.554876,4.812325],[0.555033,4.828530],[0.555189,4.785621],[0.555348,4.667421],[0.555512,4.545869],
[0.555680,4.441149],[0.555852,4.343524],[0.556028,4.250098],[0.556207,4.168058],[0.556390,4.091833],
[0.556576,4.000853],[0.556767,3.902819],[0.556963,3.816570],[0.557162,3.740869],[0.557366,3.674691],
[0.557573,3.617188],[0.557783,3.567659],[0.557996,3.525524],[0.558212,3.473705],[0.558431,3.408250],
[0.558654,3.346543],[0.558882,3.292285],[0.559113,3.241794],[0.559347,3.195679],[0.559585,3.144019],
[0.559828,3.083785],[0.560075,3.027866],[0.560326,2.979668],[0.560581,2.938553],[0.560840,2.903998],
[0.561101,2.875583],[0.561365,2.852972],[0.561630,2.835903],[0.561897,2.822766],[0.562165,2.809151],
[0.562434,2.796324],[0.562705,2.785156],[0.562976,2.774645],[0.563249,2.768037],[0.563522,2.766339],
[0.563794,2.764206],[0.564068,2.760029],[0.564341,2.759294],[0.564615,2.763788],[0.564887,2.773210],
[0.565159,2.783857],[0.565430,2.784765],[0.565701,2.779341],[0.565973,2.773951],[0.566245,2.765642],
[0.566518,2.754329],[0.566793,2.742977],[0.567069,2.735512],[0.567345,2.731071],[0.567621,2.728417],
[0.567898,2.728299],[0.568175,2.732517],[0.568451,2.741110],[0.568725,2.754162],[0.568999,2.771800],
[0.569270,2.794198],[0.569539,2.821584],[0.569805,2.854242],[0.570068,2.892522],[0.570327,2.936282],
[0.570582,2.983367],[0.570833,3.026981],[0.571080,3.069273],[0.571324,3.117919],[0.571564,3.173434],
[0.571800,3.236352],[0.572031,3.307485],[0.572256,3.387892],[0.572476,3.478714],[0.572690,3.581330],
[0.572898,3.697422],[0.573099,3.821169],[0.573293,3.950797],[0.573481,4.095978],[0.573661,4.262513],
[0.573835,4.454385],[0.574000,4.655401],[0.574159,4.795695],[0.574315,4.883635],[0.574468,4.984049],
[0.574618,5.094649],[0.574764,5.204863],[0.574908,5.317880],[0.575048,5.401690],[0.575187,5.439714],
[0.575326,5.476343],[0.575463,5.527016],[0.575599,5.592506],[0.575733,5.673843],[0.575865,5.772355],
[0.575994,5.889731],[0.576121,6.028091],[0.576245,6.172434],[0.576366,6.267043],[0.576486,6.323641],
[0.576604,6.379292],[0.576722,6.428889],[0.576839,6.489513],[0.576955,6.549414],[0.577070,6.534057],
[0.577186,6.454878],[0.577303,6.384850],[0.577422,6.329247],[0.577542,6.191171],[0.577666,5.954431],
[0.577795,5.723852],[0.577930,5.525403],[0.578069,5.354281],[0.578212,5.206707],[0.578359,5.079676],
[0.578509,4.967357],[0.578662,4.858144],[0.578820,4.754779],[0.578980,4.665772],[0.579143,4.584820],
[0.579309,4.478555],[0.579480,4.349448],[0.579656,4.230670],[0.579837,4.126040],[0.580022,4.000472],
[0.580214,3.849217],[0.580414,3.707971],[0.580621,3.581988],[0.580835,3.446742],[0.581059,3.302965],
[0.581292,3.173001],[0.581535,3.058740],[0.581786,2.957141],[0.582045,2.866720],[0.582312,2.786709],
[0.582587,2.715835],[0.582868,2.653049],[0.583156,2.597483],[0.583449,2.548416],[0.583748,2.505247],
[0.584052,2.463673],[0.584361,2.422496],[0.584675,2.385414],[0.584994,2.353158],[0.585316,2.325017],
[0.585643,2.300832],[0.585972,2.280722],[0.586305,2.264486],[0.586639,2.251966],[0.586975,2.243043],
[0.587312,2.237633],[0.587650,2.235685],[0.587987,2.236406],[0.588324,2.239564],[0.588661,2.245989],
[0.588997,2.255077],[0.589330,2.263626],[0.589663,2.272342],[0.589995,2.284467],[0.590324,2.300250],
[0.590651,2.318196],[0.590975,2.337891],[0.591297,2.361183],[0.591615,2.388868],[0.591928,2.413845],
[0.592240,2.433647],[0.592549,2.455869],[0.592854,2.480132],[0.593157,2.494877],[0.593459,2.502040],
[0.593761,2.512961],[0.594060,2.528401],[0.594358,2.548525],[0.594652,2.573555],[0.594944,2.596072],
[0.595234,2.613569],[0.595522,2.633976],[0.595807,2.660143],[0.596089,2.692408],[0.596368,2.730190],
[0.596642,2.770743],[0.596912,2.815233],[0.597178,2.867271],[0.597439,2.926381],[0.597694,2.989351],
[0.597944,3.057744],[0.598188,3.126996],[0.598426,3.185561],[0.598661,3.215751],[0.598896,3.227035],
[0.599129,3.244821],[0.599361,3.269324],[0.599591,3.300846],[0.599818,3.339785],[0.600043,3.386650],
[0.600264,3.442076],[0.600481,3.506846],[0.600694,3.581926],[0.600903,3.655262],[0.601107,3.718079],
[0.601309,3.770422],[0.601508,3.820139],[0.601704,3.847540],[0.601900,3.831660],[0.602098,3.776173],
[0.602300,3.703001],[0.602505,3.640933],[0.602714,3.583491],[0.602927,3.514070],[0.603144,3.438693],
[0.603366,3.372650],[0.603591,3.315056],[0.603821,3.265178],[0.604054,3.222410],[0.604289,3.170548],
[0.604530,3.105951],[0.604775,3.045080],[0.605025,2.992345],[0.605280,2.940744],[0.605539,2.886655],
[0.605803,2.831279],[0.606072,2.778225],[0.606346,2.710430],[0.606629,2.624042],[0.606921,2.542144],
[0.607222,2.470398],[0.607532,2.403352],[0.607851,2.339373],[0.608177,2.282136],[0.608512,2.232115],
[0.608854,2.188549],[0.609202,2.150572],[0.609555,2.116973],[0.609915,2.087609],[0.610279,2.062834],
[0.610646,2.042237],[0.611018,2.025249],[0.611392,2.011798],[0.611768,2.000953],[0.612146,1.991886],
[0.612526,1.984437],[0.612907,1.979303],[0.613288,1.968489],[0.613673,1.947838],[0.614063,1.922110],
[0.614459,1.895945],[0.614859,1.873838],[0.615264,1.855175],[0.615673,1.836867],[0.616086,1.818668],
[0.616503,1.803395],[0.616923,1.791494],[0.617346,1.780421],[0.617771,1.768222],[0.618199,1.753743],
[0.618632,1.738920],[0.619067,1.727168],[0.619505,1.718368],[0.619946,1.712431],[0.620387,1.709299],
[0.620829,1.708941],[0.621270,1.711355],[0.621711,1.716563],[0.622150,1.724617],[0.622586,1.723457],
[0.623025,1.708572],[0.623469,1.689776],[0.623919,1.671959],[0.624372,1.657690],[0.624829,1.646797],
[0.625289,1.639151],[0.625750,1.634664],[0.626212,1.633284],[0.626674,1.634996],[0.627135,1.639820],
[0.627595,1.647809],[0.628051,1.656868],[0.628506,1.665434],[0.628958,1.672938],[0.629408,1.680957],
[0.629856,1.682775],[0.630305,1.673402],[0.630758,1.656459],[0.631216,1.637220],[0.631680,1.621633],
[0.632147,1.609500],[0.632617,1.600675],[0.633090,1.595051],[0.633564,1.592561],[0.634038,1.593177],
[0.634511,1.596906],[0.634983,1.603791],[0.635452,1.613032],[0.635919,1.623054],[0.636382,1.630536],
[0.636845,1.636977],[0.637304,1.636280],[0.637767,1.624752],[0.638234,1.611090],[0.638704,1.599251],
[0.639177,1.590672],[0.639653,1.582686],[0.640131,1.568160],[0.640615,1.549678],[0.641105,1.534354],
[0.641599,1.521452],[0.642097,1.500602],[0.642605,1.470447],[0.643124,1.441672],[0.643652,1.416743],
[0.644189,1.376310],[0.644749,1.317779],[0.645335,1.261945],[0.645945,1.213644],[0.646578,1.171696],
[0.647233,1.135172],[0.647908,1.087111],[0.648622,1.026167],[0.649379,0.969816],[0.650178,0.921582],
[0.651017,0.880187],[0.651893,0.843873],[0.652805,0.801283],[0.653777,0.752696],[0.654811,0.709187],
[0.655905,0.672105],[0.657057,0.640226],[0.658263,0.612555],[0.659521,0.584256],[0.660846,0.554789],
[0.662242,0.528312],[0.663703,0.505316],[0.665229,0.485039],[0.666815,0.467120],[0.668460,0.449046],
[0.670177,0.430354],[0.671967,0.413380],[0.673828,0.398514],[0.675755,0.385448],[0.677744,0.373934],
[0.679792,0.362250],[0.681911,0.350061],[0.684104,0.338902],[0.686365,0.328928],[0.688693,0.319565],
[0.691088,0.310877],[0.693548,0.301970],[0.696087,0.292578],[0.698707,0.283925],[0.701403,0.276270],
[0.704171,0.269494],[0.707004,0.263497],[0.709899,0.262612],[0.712752,0.267840],[0.715535,0.274409],
[0.718253,0.280732],[0.720912,0.286741],[0.723517,0.292451],[0.726073,0.297935],[0.728583,0.303096],
[0.731053,0.307594],[0.733490,0.311495],[0.735899,0.315128],[0.738280,0.318506],[0.740638,0.321646],
[0.742973,0.324567],[0.745288,0.327291],[0.747585,0.329841],[0.749865,0.332243],[0.752128,0.334526],
[0.754377,0.336721],[0.756611,0.338850],[0.758831,0.340900],[0.761039,0.342924],[0.763233,0.345016],
[0.765414,0.347032],[0.767583,0.348383],[0.769746,0.349245],[0.771905,0.350240],[0.774056,0.351427],
[0.776200,0.352855],[0.778334,0.354613],[0.780456,0.356826],[0.782564,0.359618],[0.784654,0.363140],
[0.786721,0.367298],[0.788763,0.371357],[0.790785,0.375659],[0.792781,0.381280],[0.794744,0.387636],
[0.796675,0.391883],[0.798596,0.391883]]

#flop轮信息集与期望赢率的对应关系，信息集映射到0-1的实数范围
g_WrwithIflop=[[0.110735,0.000000],[0.115181,0.000003],[0.119628,0.000006],[0.124074,0.000053],[0.128520,0.000116],[0.132967,0.000228],[0.137413,0.000505],[0.141859,0.000982],[0.146306,0.001621],[0.150752,0.002849],[0.155198,0.004230],[0.159645,0.005931],[0.164091,0.008007],[0.168537,0.010323],[0.172984,0.013191],[0.177430,0.016348],[0.181876,0.020098],[0.186323,0.024501],[0.190769,0.028707],[0.195215,0.033841],[0.199662,0.038484],[0.204108,0.043703],[0.208554,0.048695],[0.213000,0.054226],[0.217447,0.059967],[0.221893,0.065986],[0.226339,0.071932],[0.230786,0.077999],[0.235232,0.084238],[0.239678,0.090354],[0.244125,0.096732],[0.248571,0.103038],[0.253017,0.109378],[0.257464,0.115692],[0.261910,0.122177],[0.266356,0.128357],[0.270803,0.135226],[0.275249,0.142599],[0.279695,0.149731],[0.284142,0.156988],[0.288588,0.164548],[0.293034,0.171757],[0.297481,0.178910],[0.301927,0.186048],[0.306373,0.193439],[0.310820,0.200868],[0.315266,0.208191],[0.319712,0.215784],[0.324159,0.223837],[0.328605,0.231755],[0.333051,0.239347],[0.337498,0.247210],[0.341944,0.255115],[0.346390,0.262619],[0.350837,0.270388],[0.355283,0.278046],[0.359729,0.285662],[0.364176,0.293474],[0.368622,0.301067],[0.373068,0.308672],[0.377515,0.316761],[0.381961,0.324576],[0.386407,0.332200],[0.390853,0.340548],[0.395300,0.348797],[0.399746,0.356924],[0.404192,0.364804],[0.408639,0.373329],[0.413085,0.381515],[0.417531,0.389473],[0.421978,0.397402],[0.426424,0.405539],[0.430870,0.413512],[0.435317,0.421456],[0.439763,0.430004],[0.444209,0.437689],[0.448656,0.446079],[0.453102,0.454231],[0.457548,0.463315],[0.461995,0.471450],[0.466441,0.480680],[0.470887,0.489113],[0.475334,0.497641],[0.479780,0.505390],[0.484226,0.513937],[0.488673,0.522062],[0.493119,0.529293],[0.497565,0.536086],[0.502012,0.543245],[0.506458,0.550331],[0.510904,0.556844],[0.515351,0.562721],[0.519797,0.569249],[0.524243,0.575670],[0.528690,0.582803],[0.533136,0.589964],[0.537582,0.596732],[0.542029,0.603764],[0.546475,0.611014],[0.550921,0.618358],[0.555368,0.626401],[0.559814,0.633943],[0.564260,0.641341],[0.568706,0.648638],[0.573153,0.655754],[0.577599,0.663314],[0.582045,0.669755],[0.586492,0.676788],[0.590938,0.682955],[0.595384,0.689803],[0.599831,0.695989],[0.604277,0.702199],[0.608723,0.708181],[0.613170,0.713847],[0.617616,0.719451],[0.622062,0.724985],[0.626509,0.730441],[0.630955,0.735510],[0.635401,0.740253],[0.639848,0.745489],[0.644294,0.750728],[0.648740,0.755722],[0.653187,0.760239],[0.657633,0.764690],[0.662079,0.769872],[0.666526,0.774855],[0.670972,0.779974],[0.675418,0.784512],[0.679865,0.789238],[0.684311,0.793780],[0.688757,0.798315],[0.693204,0.803249],[0.697650,0.807832],[0.702096,0.812480],[0.706543,0.816838],[0.710989,0.821130],[0.715435,0.825723],[0.719882,0.830068],[0.724328,0.834469],[0.728774,0.838427],[0.733221,0.842729],[0.737667,0.846815],[0.742113,0.851290],[0.746559,0.855229],[0.751006,0.858951],[0.755452,0.862906],[0.759898,0.867293],[0.764345,0.871460],[0.768791,0.875491],[0.773237,0.879280],[0.777684,0.882936],[0.782130,0.886794],[0.786576,0.890981],[0.791023,0.895188],[0.795469,0.899134],[0.799915,0.903136],[0.804362,0.907028],[0.808808,0.910977],[0.813254,0.914792],[0.817701,0.919215],[0.822147,0.923443],[0.826593,0.927981],[0.831040,0.932155],[0.835486,0.935971],[0.839932,0.939515],[0.844379,0.943539],[0.848825,0.947155],[0.853271,0.950693],[0.857718,0.954262],[0.862164,0.956934],[0.866610,0.959472],[0.871057,0.961427],[0.875503,0.963476],[0.879949,0.965308],[0.884396,0.967279],[0.888842,0.969163],[0.893288,0.970572],[0.897735,0.971907],[0.902181,0.973201],[0.906627,0.974546],[0.911074,0.976176],[0.915520,0.978408],[0.919966,0.980346],[0.924412,0.982546],[0.928859,0.984599],[0.933305,0.986592],[0.937751,0.988862],[0.942198,0.991016],[0.946644,0.992647],[0.951090,0.994543],[0.955537,0.995951],[0.959983,0.996681],[0.964429,0.997311],[0.968876,0.998060],[0.973322,0.998223],[0.977768,0.998307],[0.982215,0.998510],[0.986661,0.999010],[0.991107,0.999405],[0.995554,0.999721],[1.000000,0.999991]]

#flop轮信息集对期望赢率的导数，信息集映射到0-1实数范围
g_derivIvsWrflop=[[0.110735,0.000610],[0.115181,0.000619],[0.119628,0.005608],[0.124074,0.012409],[0.128520,0.019678],[0.132967,0.043770],[0.137413,0.084840],[0.141859,0.125443],[0.146306,0.209972],[0.150752,0.293411],[0.155198,0.346579],[0.159645,0.424773],[0.164091,0.493829],[0.168537,0.582875],[0.172984,0.677581],[0.177430,0.776751],[0.181876,0.916837],[0.186323,0.968135],[0.190769,1.050276],[0.195215,1.099446],[0.199662,1.108948],[0.204108,1.148252],[0.208554,1.183404],[0.213000,1.267569],[0.217447,1.322450],[0.221893,1.345504],[0.226339,1.350904],[0.230786,1.383822],[0.235232,1.389274],[0.239678,1.405006],[0.244125,1.426346],[0.248571,1.422037],[0.253017,1.423006],[0.257464,1.439292],[0.261910,1.424200],[0.266356,1.467330],[0.270803,1.601548],[0.275249,1.631126],[0.279695,1.618076],[0.284142,1.666191],[0.288588,1.660877],[0.293034,1.615065],[0.297481,1.606965],[0.301927,1.633809],[0.306373,1.666554],[0.310820,1.658887],[0.315266,1.677354],[0.319712,1.759460],[0.324159,1.795943],[0.328605,1.744195],[0.333051,1.738033],[0.337498,1.773080],[0.341944,1.732703],[0.346390,1.717507],[0.350837,1.734849],[0.355283,1.717628],[0.359729,1.734866],[0.364176,1.732339],[0.368622,1.709130],[0.373068,1.764825],[0.377515,1.788363],[0.381961,1.736112],[0.386407,1.796151],[0.390853,1.866367],[0.395300,1.841496],[0.399746,1.800097],[0.404192,1.844819],[0.408639,1.879105],[0.413085,1.815397],[0.417531,1.786528],[0.421978,1.806709],[0.426424,1.811676],[0.430870,1.789817],[0.435317,1.854529],[0.439763,1.825504],[0.444209,1.807730],[0.448656,1.860153],[0.453102,1.938192],[0.457548,1.936392],[0.461995,1.952696],[0.466441,1.986203],[0.470887,1.907350],[0.475334,1.830350],[0.479780,1.832531],[0.484226,1.874813],[0.488673,1.726835],[0.493119,1.577006],[0.497565,1.568872],[0.502012,1.601929],[0.506458,1.529238],[0.510904,1.393255],[0.515351,1.395020],[0.519797,1.456236],[0.524243,1.524219],[0.528690,1.607294],[0.533136,1.566345],[0.537582,1.551945],[0.542029,1.605996],[0.546475,1.641095],[0.550921,1.730349],[0.555368,1.752519],[0.559814,1.679967],[0.564260,1.652570],[0.568706,1.620776],[0.573153,1.650320],[0.577599,1.574427],[0.582045,1.515167],[0.586492,1.484412],[0.590938,1.463626],[0.595384,1.465720],[0.599831,1.393912],[0.604277,1.370997],[0.608723,1.309816],[0.613170,1.267379],[0.617616,1.252564],[0.622062,1.235793],[0.626509,1.183507],[0.630955,1.103427],[0.635401,1.122170],[0.639848,1.177952],[0.644294,1.150710],[0.648740,1.069470],[0.653187,1.008479],[0.657633,1.083350],[0.662079,1.143095],[0.666526,1.135964],[0.670972,1.085964],[0.675418,1.041778],[0.679865,1.042228],[0.684311,1.020715],[0.688757,1.064831],[0.693204,1.070197],[0.697650,1.038022],[0.702096,1.012702],[0.706543,0.972722],[0.710989,0.999133],[0.715435,1.005104],[0.719882,0.983608],[0.724328,0.939942],[0.728774,0.928779],[0.733221,0.943265],[0.737667,0.962684],[0.742113,0.946173],[0.746559,0.861540],[0.751006,0.863305],[0.755452,0.938073],[0.759898,0.961853],[0.764345,0.921873],[0.768791,0.879401],[0.773237,0.837188],[0.777684,0.845029],[0.782130,0.904687],[0.786576,0.943888],[0.791023,0.916837],[0.795469,0.893783],[0.799915,0.887708],[0.804362,0.881737],[0.808808,0.873067],[0.813254,0.926390],[0.817701,0.972808],[0.822147,0.985789],[0.826593,0.979714],[0.831040,0.898508],[0.835486,0.827687],[0.839932,0.850948],[0.844379,0.859100],[0.848825,0.804530],[0.853271,0.799182],[0.857718,0.701828],[0.862164,0.585938],[0.866610,0.505252],[0.871057,0.450215],[0.875503,0.436455],[0.879949,0.427646],[0.884396,0.433409],[0.888842,0.370359],[0.893288,0.308606],[0.897735,0.295574],[0.902181,0.296820],[0.906627,0.334637],[0.911074,0.434275],[0.915520,0.468820],[0.919966,0.465255],[0.924412,0.478304],[0.928859,0.455078],[0.933305,0.479360],[0.937751,0.497446],[0.942198,0.425638],[0.946644,0.396597],[0.951090,0.371588],[0.955537,0.240485],[0.959983,0.152875],[0.964429,0.154970],[0.968876,0.102598],[0.973322,0.027865],[0.977768,0.032278],[0.982215,0.079060],[0.986661,0.100659],[0.991107,0.079890],[0.995554,0.065906],[1.000000,0.055729]]

#每张牌和表示牌的整数的对应关系用字典表示方便读取
cardint={"2c":1, "2d":2, "2h":3, "2s":4, "3c":5, "3d":6, "3h":7, "3s":8, "4c":9, "4d":10, "4h":11, "4s":12, 
"5c":13, "5d":14, "5h":15, "5s":16, "6c":17, "6d":18, "6h":19, "6s":20, "7c":21, "7d":22, "7h":23, "7s":24, 
"8c":25, "8d":26, "8h":27, "8s":28, "9c":29, "9d":30, "9h":31, "9s":32, "Tc":33, "Td":34, "Th":35, "Ts":36, 
"Jc":37, "Jd":38, "Jh":39, "Js":40, "Qc":41, "Qd":42, "Qh":43, "Qs":44, "Kc":45, "Kd":46, "Kh":47, "Ks":48, 
"Ac":49, "Ad":50, "Ah":51, "As":52}

intcard={1:"2c", 2:"2d", 3:"2h", 4:"2s", 5:"3c", 6:"3d", 7:"3h", 8:"3s", 9:"4c", 10:"4d",11:"4h",12:"4s", 
13:"5c",14:"5d",15:"5h",16:"5s",17:"6c",18:"6d",19:"6h",20:"6s",21:"7c",22:"7d",23:"7h",24:"7s", 
25:"8c",26:"8d",27:"8h",28:"8s",29:"9c",30:"9d",31:"9h",32:"9s",33:"Tc",34:"Td",35:"Th",36:"Ts", 
37:"Jc",38:"Jd",39:"Jh",40:"Js",41:"Qc",42:"Qd",43:"Qh",44:"Qs",45:"Kc",46:"Kd",47:"Kh",48:"Ks", 
49:"Ac",50:"Ad",51:"Ah",52:"As"}

Rank_class_string = {
        9 : "Straight Flush",
        8 : "Four of a Kind",
        7 : "Full House",
        6 : "Flush",
        5 : "Straight",
        4 : "Three of a Kind",
        3 : "Two Pair",
        2 : "Pair",
        1 : "High Card"}

types_string=["High Card","Pair", "Two Pair", "Three of a Kind", "Straight", "Flush", "Full House", "Four of a Kind", "Straight Flush"]

Street_string={
    0:"preflop",
    1:"flop",
    2:"turn",
    3:"river"
}

#用于显示牌的字符串 prettycards
rankstr = [str(n) for n in range(2, 10)] + list('TJQKA')
suitstr = [u"\u2663",u"\u2666",u"\u2665",u"\u2660"] 
suitstr1 = list("cdhs") ## clubs,梅花; # diamonds,方片; spades,黑桃;# hearts,红桃，红心;
cardpretty =[] #注意索引是[0-51]对应52张牌,因为列表从0开始索引
for rank in rankstr:
    for suit in suitstr:
        cardstr = rank + suit
        cardpretty.append(cardstr)
cardplain =[] #注意索引是[0-51]对应52张牌,因为列表从0开始索引
for rank in rankstr:
    for suit in suitstr1:
        cardstr = rank + suit
        cardplain.append(cardstr)
print("card=",cardpretty,cardplain)

#存储同花顺子的信息
rankstr1=[str(n) for n in range(2, 15)]
suitstr1=list("CDHS")
cardstflush=[]
for suit in suitstr1:
    for i in range(9):
        cardstflush.append([rankstr1[i]+"_"+suit,rankstr1[i+1]+"_"+suit,rankstr1[i+2]+"_"+suit,rankstr1[i+3]+"_"+suit,rankstr1[i+4]+"_"+suit])
    cardstflush.append([rankstr1[-1]+"_"+suit,rankstr1[0]+"_"+suit,rankstr1[1]+"_"+suit,rankstr1[2]+"_"+suit,rankstr1[3]+"_"+suit])
#print("cardstflush=",cardstflush)

#加载dll，并设置函数的输出类型
loadlib = cdll.LoadLibrary
#若__name__ == "__main__"入库文件所在目录下，那么可以直接使用文件名调用
#比如 lib = loadlib("libwinrate.so")
#但若不在，那么那么可以使用绝对路径
lib = loadlib("D:\\TexasHoldem\\LuaDemo\\agent\\Ccardev\\libwinrate.so")

lib.compinit()

#相关函数
get_winrate=lib.get_winrate
get_winrate2p2s=lib.get_winrate2p2s
get_bestfive=lib.Lookbestfive
get_handrank=lib.LookHandRank
get_handtype=lib.LookHandCategory
get_oppoprob=lib.LookTypeprobopp
get_oursprob=lib.LookTypeprobour
intsmtointbg=lib.intsmtointbg
intbgtointsm=lib.intbgtointsm

#返回参数类型设置
get_winrate.argtypes = [c_int,c_int,c_int,c_int,c_int,c_int,c_int,c_int,c_int]
get_winrate.restype= c_double
get_winrate2p2s.argtypes = [c_int,c_int,c_int,c_int,c_int,c_int,c_int,c_int,c_int]
get_winrate2p2s.restype= c_double
get_handrank.argtypes = [c_int,c_int,c_int,c_int,c_int,c_int,c_int]
#intsmtointbg.argtypes = [c_int,c_int,c_int,c_int]
#intbgtointsm.argtypes = [c_int,c_int,c_int,c_int]
get_handrank.restype= c_int
get_handtype.restype= c_int
get_bestfive.restype= c_int
get_oppoprob.restype= c_int
get_oursprob.restype= c_int

#定义c的类型的数组
bestcards = (c_int * 12) (1)
cardprobs = (c_int * 16) (0)
#get_bestfive.restype=POINTER(c_int)


#将一对手牌的k1，k2表示转换成card1，card2表示
def Cardsm2bg(k1,k2):
    k1a= c_int(k1)
    k2a= c_int(k2)
    cd1= c_int(0)
    cd2= c_int(0)
    intsmtointbg(k1a,k2a,byref(cd1),byref(cd2))
    return cd1.value,cd2.value


#将一对手牌的card1，card2表示转换成k1，k2表示
def Cardbg2sm(cd1,cd2):
    cd1a=c_int(cd1)
    cd2a=c_int(cd2)
    k1= c_int(0)
    k2= c_int(0)
    intbgtointsm(cd1a,cd2a,byref(k1),byref(k2))
    return k1.value,k2.value

#将一张牌从1-52数字表示的牌转换为它的牌值(0-12表示)和花色(0-3表示)
def Cardbg2valsuit(cd):
    k1=(cd-1)//4
    s1=(cd-1)%4
    return k1,s1

def testCardbg2valsuit():

    for i in range(1,53):
        k1,s1=Cardbg2valsuit(i)
        print(i,k1,s1,rankstr[k1],suitstr[s1])
    return None


#输入为字符串列表，如：['8c', '6h'],["2c", "2d", "2h", "2s", "3c"]
#board可以为空
#nplayer为当前还在的玩家数量（没有fold掉的玩家数量），包括自己。
def getwinrate(nplayer,hand,board):
    #将牌转换为整数数字[1-52]表示的牌
    hand = [cardint[x] for x in hand]
    board =[cardint[x] for x in board]
    hand.extend(board)
    nb=len(board)
    card1=hand[0]
    card2=hand[1]
    card3=0
    card4=0
    card5=0
    card6=0
    card7=0
    if nb>4:
        card7=hand[6]
    if nb>3:
        card6=hand[5]
    if nb>0:
        card5=hand[4]
        card4=hand[3]
        card3=hand[2]
    #print("nplayer={},nb={},cd1={},cd2={},cd3={},cd4={},cd5={},cd6={},cd7={}".format(nplayer,nb,card1,card2,card3,card4,card5,card6,card7))
    rw= c_double(0.0)
    rw=get_winrate(nplayer,nb,card1,card2,card3,card4,card5,card6,card7)
    return rw


#手牌索引信息
#//输入为两个整数1-52
#//将两张牌表示成1326中组合中的一个索引，即表示成0-1325
#//输出：手牌的索引哈希
def HandtoIdx(hand1, hand2):
    k1=hand1 #//k1 表示序号小的那张牌
    k2=hand2
    if (hand1>hand2):
        k1=hand2
        k2=hand1
    idx=0
    for i in range(1,k1):
        idx+=(52-i)
    idx+=k2-k1-1
    return idx

#手牌索引信息
IdxtoHand=np.zeros((1326,2),dtype=np.int_)  #记录1326种手牌索引对应的牌
IdxtoHandlist=[]
j=0
for k1 in range(1,52):
    for k2 in range(k1+1,53):
        IdxtoHandlist.append([intcard[k1],intcard[k2]])
        IdxtoHand[j][0]=k1
        IdxtoHand[j][1]=k2
        j=j+1


#对手手牌的保存信息，每局更新，
#第一维是不同的手牌，第二维第一列是idx，第二列是翻牌前赢率，第三列用于存储翻牌后三论的赢率
handOpponet=np.zeros((1326,5))
for i in range(1326):
    handOpponet[i,0]=1
    handOpponet[i,1]=get_winrate(2,0,IdxtoHand[i][0],IdxtoHand[i][1],0,0,0,0,0)




#计算考虑对手手牌的平均赢率
#输入是两个整数的列表，表示牌的，用整数处理比较方便
#还使用全局的对手手牌列表handOpponet
#输出是我方手牌和对手范围的平均赢率
def getwr2srange(hand,board,handdist=handOpponet[:,0]):
    if len(board)<5:
        board+=([0]*(5-len(board)))
    avgWr=0.0
    sumHD=0.0
    for i in range(1326):
        if handdist[i]>0:
            sumHD+=handdist[i]
            avgWr+=get_winrate2p2s(hand[0],hand[1],IdxtoHand[i][0],IdxtoHand[i][1],board[0],board[1],board[2],board[3],board[4])*handdist[i]
    avgWr/=sumHD
    return avgWr


#计算考虑对手手牌的平均赢率
#输入是手牌整数列表，(表示牌的，用整数处理比较方便)，公共牌整数列表，对手1326种手牌的分布概率
#输出是我方手牌和对手手牌分布的平均赢率
def getwr2srangedist(hand,board,ophanddist):
    if len(board)<5:
        board+=([0]*(5-len(board)))
    avgWr=0.0
    sumHD=0.0
    for i in range(1326):
        if ophanddist[i]>0:
            sumHD+=ophanddist[i]
            avgWr+=get_winrate2p2s(hand[0],hand[1],IdxtoHand[i][0],IdxtoHand[i][1],board[0],board[1],board[2],board[3],board[4])*ophanddist[i]
    avgWr/=sumHD
    return avgWr

# 根据赢率返回1326种手牌映射到0-1范围上的实数
# 输入是期望赢率，输出是插值出来的手牌映射到0-1范围上的实数
# 其中使用了常数组g_WrwithHands
def handratiofromWR(wr,arrayWrwithHands=g_WrwithHands):
    wrmin=np.min(np.array(arrayWrwithHands)[:,0])
    wrmax=np.max(np.array(arrayWrwithHands)[:,0])
    #print('wr=',wr)
    #print('wrmin',wrmin)
    #print('wrmax',wrmax)
    if wr<wrmin:
        return 0
    if wr>wrmax:
        return 1
    id=0
    for i in range(len(arrayWrwithHands)):
        #print('i',i,g_WrwithHands[i])
        if abs(wr-arrayWrwithHands[i][0])<0.00001:
            return arrayWrwithHands[i][1]
        elif wr>arrayWrwithHands[i][0] and wr<arrayWrwithHands[i+1][0]:
            id=i
            break
    handratio=arrayWrwithHands[id][1]+(wr-arrayWrwithHands[id][0])*(arrayWrwithHands[id+1][1]-arrayWrwithHands[id][1])/(arrayWrwithHands[id+1][0]-arrayWrwithHands[id][0])
    return handratio


def WRfromhandratio(hi,arrayWrwithHands=g_WrwithHands):
    id=0
    for i in range(len(arrayWrwithHands)):
        #print('i',i,g_WrwithHands[i])
        if abs(hi-arrayWrwithHands[i][1])<0.00001:
            return arrayWrwithHands[i][0]
        elif hi>arrayWrwithHands[i][1] and hi<arrayWrwithHands[i+1][1]:
            id=i
            break
    wr=arrayWrwithHands[id][0]+(hi-arrayWrwithHands[id][1])*(arrayWrwithHands[id+1][0]-arrayWrwithHands[id][0])/(arrayWrwithHands[id+1][1]-arrayWrwithHands[id][1])
    return wr



# 根据赢率，返回1326种手牌映射到0-1范围上的实数关于赢率的导数
# 输入是期望赢率，输出是插值出来的手牌映射到0-1范围上的实数的导数
# 其中使用了常数组g_derivHandsvsWr
def handderivwithWR(wr,arrayWrwithHands=g_derivHandsvsWr):
    wrmin=np.min(np.array(arrayWrwithHands)[:,0])
    wrmax=np.max(np.array(arrayWrwithHands)[:,0])
    if wr<wrmin and wr>wrmax:
        return 0
    id=0
    for i in range(len(arrayWrwithHands)-1):
        #print('i',i,g_WrwithHands[i])
        if abs(wr-arrayWrwithHands[i][0])<0.00001:
            return arrayWrwithHands[i][1]
        elif wr>arrayWrwithHands[i][0] and wr<=arrayWrwithHands[i+1][0]:
            id=i
            break
    handderiv=arrayWrwithHands[id][1]+(wr-arrayWrwithHands[id][0])*(arrayWrwithHands[id+1][1]-arrayWrwithHands[id][1])/(arrayWrwithHands[id+1][0]-arrayWrwithHands[id][0])
    return handderiv


#根据给出已知牌标记对手的手牌范围
#输入是一个整数的列表
def delcdinHandop(cards):
    for i in range(1326):
        if int(IdxtoHand[i][0]) in cards or int(IdxtoHand[i][1]) in cards:
            handOpponet[i,0]=0
    return None


#将preflop等轮次的赢率小于阈值wr_threshold的牌去掉
#输入是一个赢率阈值-由统计特征的pffr等对应得到和轮次信息
def delcdUnderwr(wr_threshold,rnd=1):
    for i in range(1326):
        if handOpponet[i,rnd] < wr_threshold:
            handOpponet[i,0]=0
    return None


#范围到赢率对应的表
g_Table_rgtowr=[]
#将preflop轮的按赢率排序的范围对应的赢率取出来
#注意：范围的定义赢率小于等于对应的比例
def RgtoWr(handrg):
    if not g_Table_rgtowr:
        genTabRgtoWr()
    handrgidx=int(handrg*1326)
    #注意当rg=0时，就变成负的了，所以需要用一个max做一下限制
    return g_Table_rgtowr[max(handrgidx-1,0)]

def genTabRgtoWr():
    global g_Table_rgtowr
    lst_Wr=handOpponet[:,1].tolist()
    #print('lst_Wr=',lst_Wr)
    lst_Wr.sort()
    #print('lst_Wr=',lst_Wr)
    g_Table_rgtowr=lst_Wr
    return None


#输入为字符串列表，如：['8c', '6h'],["2c", "2d", "2h", "2s", "3c"]
#board可以为空列表
#返回为最好5张牌的列表
def getbestfive(hand,board):
    #将牌转换为整数数字[1-52]表示的牌
    hand = [cardint[x] for x in hand]
    board =[cardint[x] for x in board] 
    nb=len(board)
    hand.extend(board)
    cards=[hand[0],hand[1],0,0,0,0,0]
    if nb>4:
        cards[6]=hand[6]
    if nb>3:
        cards[5]=hand[5]
    if nb>0:
        cards[4]=hand[4]
        cards[3]=hand[3]
        cards[2]=hand[2]

    for i in range(7):
        bestcards[i]=cards[i]
    #print("bestcards=",bestcards)

    if nb>0:
        rk=get_bestfive(bestcards) #竟然不用引用也不会出错？
        bestcds=[0]*5
        for i in range(5):
            bestcds[i]=bestcards[i+7]
    else:
        bestcds=[hand[0],hand[1]]
    #print("bestcards=",[x for x in bestcards])
    return bestcds


#输入为字符串列表，如：['8c', '6h'],["2c", "2d", "2h", "2s", "3c"]
#board可以为空列表
#返回为对手所有的牌型数量和对手能够构成8种牌型的数量
def getoppoprob(hand1,board1):
    #将牌转换为整数数字[1-52]表示的牌
    hand = [cardint[x] for x in hand1]
    board =[cardint[x] for x in board1] 
    nb=len(board)
    hand.extend(board)
    cards=[hand[0],hand[1],0,0,0,0,0]
    if nb>4:
        cards[6]=hand[6]
    if nb>3:
        cards[5]=hand[5]
    if nb>0:
        cards[4]=hand[4]
        cards[3]=hand[3]
        cards[2]=hand[2]

    for i in range(7):
        cardprobs[i]=cards[i]
    #print("bestcards=",bestcards)

    if nb>0:
        ourcategory=get_handtype(cards[0],cards[1],cards[2],cards[3],cards[4],cards[5],cards[6])
    else:
        ourcategory=2 #preflop 阶段随便设置一个2用于显示


    total=get_oppoprob(cardprobs)  #竟然不用引用也不会出错？
    print("total=",total)
    print("cardprobs=",[x for x in cardprobs[7:]])


    probability=[0]*8
    for i in range(8):
        probability[i]=cardprobs[i+7]
    
    OPgtprobs=cardprobs[-1]/total

    formatstr=" ".join(["{outlst["+str(i)+"]}" for i in range(9)])
    print("category:"+formatstr.format(outlst=["{:^16}".format(x) for x in types_string]))
    typenumber=probability[:]
    typenumber.insert(total-sum(probability),0)
    print("numbers :"+formatstr.format(outlst=["{:^16}".format(x) for x in typenumber]))
    OPtpyprobs=[x/total for x in typenumber]
    typeprobs=["%.4f"%x for x in OPtpyprobs]
    print("probabil:"+formatstr.format(outlst=["{:^16}".format(x) for x in typeprobs]))
    ourtyppos=[""]*9
    ourtyppos[ourcategory-1]="our < OP="
    ourtyppos[ourcategory]="%.4f"%OPgtprobs
    print("probabil:"+formatstr.format(outlst=["{:^16}".format(x) for x in ourtyppos]))
   
    return OPtpyprobs,OPgtprobs



#输入为字符串列表，如：['8c', '6h'],["2c", "2d", "2h", "2s", "3c"]
#board可以为空列表
#返回为我方所有可能牌型和构成8种牌型的数量
def getoursprob(hand1,board1):
    #将牌转换为整数数字[1-52]表示的牌
    hand = [cardint[x] for x in hand1]
    board =[cardint[x] for x in board1] 
    nb=len(board)
    hand.extend(board)
    cards=[hand[0],hand[1],0,0,0,0,0]
    if nb>4:
        cards[6]=hand[6]
    if nb>3:
        cards[5]=hand[5]
    if nb>0:
        cards[4]=hand[4]
        cards[3]=hand[3]
        cards[2]=hand[2]

    for i in range(7):
        cardprobs[i]=cards[i]
    #print("bestcards=",bestcards)

    total=get_oursprob(cardprobs)  #竟然不用引用也不会出错？
    probability=[0]*9
    for i in range(9):
        probability[i]=cardprobs[i+7]
    return total,probability




#输入为字符串列表：['8c', '6h'],["2c", "2d", "2h", "2s", "3c"]
#board可以为空列表
#返回为牌型的rank，值越大，牌越大
def gethandrank(hand1,board1):
    #将牌转换为整数数字[1-52]表示的牌
    hand = [cardint[x] for x in hand1]
    board =[cardint[x] for x in board1] 
    nb=len(board)
    hand.extend(board)
    card1=hand[0]
    card2=hand[1]
    card3=0
    card4=0
    card5=0
    card6=0
    card7=0
    if nb>4:
        card7=hand[6]
    if nb>3:
        card6=hand[5]
    if nb>0:
        card5=hand[4]
        card4=hand[3]
        card3=hand[2]
    rk=get_handrank(card1,card2,card3,card4,card5,card6,card7)
    return rk

#通过牌组合的字符串来获取rank
def gethandstrrk(handstr):
    cards=[]
    for i in range(len(handstr)//2):
        cards.append(handstr[i*2:(i+1)*2])
    hole=cards[:2]
    board=cards[2:]
    rank=gethandrank(hole,board)
    return rank


#根据rank值输出牌型的类型
#数值越大牌型越大
def get_rank_class(rk):
    val=7463-rk
    if (val > 6185): return 1 #// 1277 high card
    if (val > 3325): return 2 #// 2860 one pair
    if (val > 2467): return 3 #//  858 two pair
    if (val > 1609): return 4 #//  858 three-kind
    if (val > 1599): return 5 #//   10 straights
    if (val > 322):  return 6 #// 1277 flushes
    if (val > 166):  return 7 #//  156 full house
    if (val > 10):   return 8 #//  156 four-kind
    return 9                 #//  10 straight-flushes

#返回牌型的说明
def get_class_string(classv):
    return Rank_class_string[classv]

#显示牌的基本字符串形式
#这种*board的形式，会把输入的参数加入到一个tuple中去，等价于board变为一个()
def hand_to_plain(hand,*board):
    handstr=",".join(hand)
    if board:
        if len(board[0])>0:
            handstr=handstr+","+",".join(board[0])
    return handstr

#显示牌的pretty字符串形式
def hand_to_pretty(hand,*board):
    #print("hand=",hand)
    #print("board=",board)
    handstr=",".join([cardpretty[cardint[x]-1] for x in hand])
    if board:
        if len(board[0])>0:
            handstr=handstr+","+",".join([cardpretty[cardint[x]-1] for x in board[0]])
    return handstr

#显示整数表示的牌的基本字符串形式
def handint_to_plain(hand,*board):
    handstr=" ".join(intcard[x] for x in hand)
    if board:
        if len(board[0])>0:
            handstr=handstr+","+",".join([intcard[x] for x in board[0]])
    return handstr

#显示整数表示的牌的pretty字符串形式
def handint_to_pretty(hand,*board):
    handstr=",".join([cardpretty[x-1] for x in hand])
    if board:
        if len(board[0])>0:
            handstr=handstr+","+",".join([cardpretty[x-1] for x in board[0]])
    return handstr

#得到最好的5张牌及其plain显示
def getbestcards(hand,board):
    bestcds=getbestfive(hand,board)
    handstr=",".join(intcard[x] for x in bestcds)
    return handstr

#得到最好的5张牌及其pretty显示
def getbestcardspretty(hand,board):
    bestcds=getbestfive(hand,board)
    handstr=",".join(cardpretty[x-1] for x in bestcds)
    return handstr

#输入为7个数字构成的列表：[1-52]
#返回为最好5张牌的rank及其列表
def getbesthandcard(cards):
    for i in range(7):
        bestcards[i]=cards[i]
    #print("bestcards=",bestcards)

    rank=get_bestfive(bestcards)
    bestcds=[0]*5
    for i in range(5):
        bestcds[i]=bestcards[i+7]

    return rank,bestcds


#获取考虑在高起手范围或弃牌率情况下，对手未弃牌所要考虑的风险系数
#这个系数>1乘以判别行动需要的赢率，等价于在给出相同的动作，所需的赢率上升。
#等于是考虑对手未弃牌，说明对手牌较大，导致我方采用平均方法得到的赢率估计偏高的问题。
#等于是考虑的更为真实的赢率：即考虑了起手范围和弃牌率的赢率
#分不同的轮次进行考虑：对于preflop用一个169*7的表来获得整个系数。
#对于其它轮次其实也可以采用类似ars方法那样的表来处理，但这里简化考虑只给了一个常数值。
def getstrgcount(street,hand,fr):
    if street==0:
        [hand1,hand2]= [cardint[x] for x in hand]

        #下面这段映射相当于在winrate.CPP中的intbgtointsm函数
        k1=(hand1-1)//4
        s1=(hand1-1)%4
        k2=(hand2-1)//4
        s2=(hand2-1)%4
        if (s1==s2):
            if (k1>k2):
                temp1=k1
                k1=k2
                k2=temp1
        else:
            if (k1<k2):
                temp1=k1
                k1=k2
                k2=temp1
        
        snk1k2=k1*13+k2
        hr=np.array([0.05,0.15,0.3,0.45,0.6,0.75,0.9])
        hr1=np.where(hr>fr,1,0)
        snhr=np.argmax(hr1)
        #print('k1=',k1,"k2=",k2)
        #print('snk1k2=',snk1k2,'snhr=',snhr)
        return wrdncthr[snk1k2][snhr]
    else:
        return 1.05


'''
#利用CardEvaluator下的数据进行赢率计算和查询
#输入参数是字符串列表，public可以为空
#比如：['8c', '6h']
#返回-662-663之间的实数值：本质是ewr*1326-663
def get_hand_strength(private_card,public_card):
    hand_strength = lookup.calc(private_card, public_card)
    return hand_strength

#范围：赢率，[0-1]之间
def get_hand_EWR(private_card,public_card):
    hand_strength = lookup.calcEWR(private_card, public_card)
    return hand_strength
'''


#测试getstrgcount函数
def testgetstrgcount():
    cardssigle=[x for x in cardint.keys()]
    for i in range(52):
        for j in range(i+1,52):
            hand=[cardssigle[i],cardssigle[j]]
            print("hand=",hand)
            print([getstrgcount(0,hand,hr) for hr in [0.04,0.14,0.29,0.44,0.59,0.74,0.89]])
            print("print anykey to continue")
            anykey=input()
    return None


#测试两张手牌情况下对应的赢率和范围强度并绘图
def  testWrtoRange():

    plt.figure()
    resWrtoRange=np.array(g_resWrtoRange)
    plt.plot(resWrtoRange[:,0],label='Wr')
    plt.plot(resWrtoRange[:,1],label='Rg')
    plt.legend()

    plt.figure()
    resWrtoRange=np.array(g_resWrtoRange)
    plt.plot(resWrtoRange[:,0],resWrtoRange[:,1])
    plt.xlabel('Wr')
    plt.ylabel('Rg')
    plt.savefig("fig-2cards-rg-vs-wr.pdf")
    plt.show()
    


#测试get_winrate2p2s
def testgetwr2p2s():
    for i in range(1000):
        tmp_cards=random.sample(range(1,52), k=9) #np.random.randint(1,53,9) #
        tmp_ncard=random.choice([4,7,8,9]) 
        hd1=tmp_cards[0]
        hd2=tmp_cards[1]
        card1=tmp_cards[2]
        card2=tmp_cards[3]
        card3=0
        card4=0
        card5=0
        card6=0
        card7=0
        if tmp_ncard>8:
            card7=tmp_cards[6]
        if tmp_ncard>7:
            card6=tmp_cards[5]
        if tmp_ncard>4:
            card5=tmp_cards[4]
            card4=tmp_cards[3]
            card3=tmp_cards[2]
        wr=get_winrate2p2s(hd1,hd2,card1,card2,card3,card4,card5,card6,card7)
        print('test i=',i,':',hd1,' ',hd2,' ',card1,' ',card2,' ',card3,' ',card4,' ',card5,' ',card6,' ',card7,':',wr)

    
    wr=get_winrate2p2s(1, 2, 9, 4, 5,6,7,8,20)
    print('wr=',wr)
    hand1=[intcard[i] for i in [1, 2]]
    print('hand1=',hand1)
    hand2=[intcard[i] for i in [9, 4]]
    print('hand2=',hand2)
    board=[intcard[i] for i in [5,6,7,8,20]]
    print('board=',board)
    print(getbestfive(hand1,board))
    print(getbestfive(hand2,board))
    print(gethandrank(hand1,board))
    print(gethandrank(hand2,board))

    print(intcard)
    print(cardint)

    return None


#测试 getoppoprob的函数
#测试 getwinrate的函数 等
def testfuncsa():
    hand=['8c', '6h']
    board=["2c", "2d", "2h", "2s", "3c"]
    OPtpyprobs,OPgtprobs=getoppoprob(hand,board)
    print("best cards: ",getbestcards(hand,board))
    for nplayer in range(2,7):
        print("winrate of %d players: %.4f"%(nplayer,getwinrate(nplayer,hand,board)))

    hand=['8c', '6h']
    board=["2c", "4d", "Ah", "2s", "3c"]
    OPtpyprobs,OPgtprobs=getoppoprob(hand,board)
    print("best cards: ",getbestcards(hand,board))
    for nplayer in range(2,7):
        print("winrate of %d players: %.4f"%(nplayer,getwinrate(nplayer,hand,board)))

    hand=['Ac', 'As']
    board=["2c", "4d", "Ah", "2s", "3c"]
    OPtpyprobs,OPgtprobs=getoppoprob(hand,board)
    print("best cards: ",getbestcards(hand,board))
    for nplayer in range(2,7):
        print("winrate of %d players: %.4f"%(nplayer,getwinrate(nplayer,hand,board)))

    hand=['Td', '4h']
    board=["9d", "Ts", "4c", "3d", "9h"]
    OPtpyprobs,OPgtprobs=getoppoprob(hand,board)
    print("best cards: ",getbestcards(hand,board))
    for nplayer in range(2,7):
        print("winrate of %d players: %.4f"%(nplayer,getwinrate(nplayer,hand,board)))


#测试输出对手手牌的信息
def testHandoppent():
    print('IdxtoHand=',IdxtoHand)
    print('handOpponet=',handOpponet)
    print('hand=',[intcard[x] for x in IdxtoHand[545]])
    print('hand=',[intcard[x] for x in IdxtoHand[1289]])

    hand=['5c', '9c']
    idx=HandtoIdx(cardint[hand[0]],cardint[hand[1]])
    print('hand=',hand)
    print('idx=',idx)
    print('hand=',[intcard[x] for x in IdxtoHand[idx]])
    hand=['Qs', 'Jh']
    idx=HandtoIdx(cardint[hand[0]],cardint[hand[1]])
    print('hand=',hand)
    print('idx=',idx)
    print('hand=',[intcard[x] for x in IdxtoHand[idx]])
    return None


#测试翻牌前手牌范围和赢率之间的关系
def testRgtoWr():
    n=100
    for i in range(n):
        rg=(i+1)*1/n
        print('rg=',rg,' wr=',RgtoWr(rg))
    rg=0.995
    print('rg=',rg,' wr=',RgtoWr(rg))
    rg=0.0
    print('rg=',rg,' wr=',RgtoWr(rg))
    return None

#测试期望赢率和去除手牌后计算赢率的比较
def testwrcompare():
    hand=['3h', 'Ac']
    hd=[cardint[x] for x in hand]
    wr1=getwinrate(2,hand,[])

    print('orig sum=',sum(handOpponet[:,0]))
    delcdinHandop(hd)
    print('adel sum=',sum(handOpponet[:,0]))
    wr2=getwr2srange(hd,[])
    print('wr=',wr1,wr2)
    return None

#测试在手牌库中去掉相关的手牌后并计算赢率
def testdelcdinHandop():
    hd=[3,8]
    delcdinHandop(hd)
    for i in range(1326):
        if handOpponet[i,0]==0:
            print('handop=',handOpponet[i],IdxtoHand[i])
    print('wr=',getwr2srange(hd,[]))

    cd=[9,20,31]
    delcdinHandop(cd)
    for i in range(1326):
        if handOpponet[i,0]==0:
            print('handop=',handOpponet[i],IdxtoHand[i])
    print('wr=',getwr2srange(hd,cd))

    cd1=[24]
    delcdinHandop(cd1)
    for i in range(1326):
        if handOpponet[i,0]==0:
            print('handop=',handOpponet[i],IdxtoHand[i])
    print('wr=',getwr2srange(hd,cd+cd1))

    cd2=[47]
    delcdinHandop(cd2)
    for i in range(1326):
        if handOpponet[i,0]==0:
            print('handop=',handOpponet[i],IdxtoHand[i])
    print('wr=',getwr2srange(hd,cd+cd1+cd2))

    return None


def testhandtrans(idx,board=[]):
    hand=[intcard[x] for x in IdxtoHand[idx]]
    print(idx,' : ',hand)
    print('wr:',getwinrate(2,hand,board))
    return None


#测试手牌的card1，card2和k1，k2的转换
#注意由于bg到sm是多对一的对应，所以sm到bg只取其中的一个
def testcardbg2sm():
    for i in range(10):
        cd1,cd2=np.random.randint(1,52,2)
        if cd1!=cd2:
            print('cd1={},cd2={}'.format(cd1,cd2))
            k1,k2=Cardbg2sm(cd1,cd2)
            print('k1={},k2={}'.format(k1,k2))
            cd3,cd4=Cardsm2bg(k1,k2)
            print('cd3={},cd4={}'.format(cd3,cd4))
            k3,k4=Cardbg2sm(cd3,cd4)
            print('k3={},k4={}\n'.format(k3,k4))

    return None


#普通阶乘
def fact(n):
    if n == 0:
        return 1
    else:
        res=1
        for i in range(1,n+1):
            res*=i
        return res

#普通Cmn，求组合数
def Cmn1(n,m):
    numer=fact(n)
    denom=(fact(n-m)*fact(m))
    return numer/denom

#Cmn，求组合数
def Cmn(n,m):
    if m==0 : return 1
    if n==0 : return 1
    numer=1 #numerator
    denom=1 #denominator
    if m<n/2:
        for i in range(n-m+1,n+1):
            numer*=i
        for i in range(1,m+1):
            denom*=i
    else:
        for i in range(m+1,n+1):
            numer*=i
        for i in range(1,n-m+1):
            denom*=i
    return (numer/denom)


def testCMN():
    n=52
    for m in range(52):
        print('c(n,m)=',Cmn(n,m),Cmn1(n,m))
    return None


#从起点是 datastt 终点是 dataend的序列中寻找组合的序号id。id从1开始计算
#比如要从1,2,3,4序列的2个数组合中找组合[2,4]的序号：
#那么组合集包括[1,2],[1,3],[1,4],[2,3],[2,4],[3,4],那么组合[2,4]的序号为5。
#注意组合中的数组都是从小到大的。
#算法：对于一个[stt,....,end]的序列求组合[c1,...,cm]的序号
#id+=sum([\bionm(end-i,m-1) for i in stt,...,c1-1])
#id+=sum([\bionm(end-i,m-2) for i in c1+1,...,c2-1])
#...
#id+=sum([\bionm(end-i,0) for i in c(m-1)+1,...,cm])
#id+=1 #为了从1开始计数加上1。
def getCombinationId(comb1=[4,7,8], datastt=1,dataend=10):
    comb=sorted(comb1)
    for i in comb:
        if i not in range(datastt,dataend+1):
            return -1
    m=len(comb)
    comblst=[datastt-1]+comb #+[dataend]
    #print('comblst',comblst)
    id=1
    for k in range(m):
        for i in range(comblst[k]+1,comblst[k+1]):
            #print('k=',k,' i=',i)
            id+=Cmn(dataend-i,m-1-k)

    #print('id=',id)
    return id



#数值的求导数的方法
#二阶差分计算
#求第一个输入ye关于第二个输入xs的导数
#两个输入都是列表
#并不假设xs是等间距的分布
def Diffoftwovars(ye,xs):
    fe=[]
    for i in range(len(xs)):
        if i==0:
            h=((xs[i+1]-xs[i])+(xs[i+2]-xs[i+1]))/2
            fv=(-3*ye[i]+4*ye[i+1]-ye[i+2])/(2*h)
        elif i==len(xs)-1:
            h=((xs[i]-xs[i-1])+(xs[i-1]-xs[i-2]))/2
            fv= (3*ye[i]-4*ye[i-1]+ye[i-2])/(2*h)
        else:
            h=((xs[i]-xs[i-1])+(xs[i+1]-xs[i]))/2
            fv= (ye[i+1]-ye[i-1])/(2*h)
        #if fv<0: fv=0.0
        fe.append(fv)
    return fe


# 测试不同的属性在手牌上的情况
def testhandtypetohand():
    tpoftwocards=np.empty(1326,dtype='int')
    for i in range(1326):
        tpoftwocards[i]=get_handrank(IdxtoHand[i][0],IdxtoHand[i][1],0,0,0,0,0)

    actiontprange=np.linspace(1,169,169)
    actiondensity=np.array(evalActionDensity(actiontprange,tpoftwocards,2))

    plt.figure()
    plt.plot(actiontprange,actiondensity,label='pdf of hand number for preflop')
    plt.xlabel('handtype')
    plt.ylabel('probability')
    plt.legend()
    plt.title('Pdf of 1326 hands for preflop')
    plt.savefig('fig-hands-dist-tp-preflop.pdf')


    tpoftwocdssorted=sorted(tpoftwocards)
    handsseq=np.linspace(1,1326,1326)

    plt.figure()
    plt.plot(handsseq,tpoftwocdssorted,label='handtype of hand')
    plt.xlabel('hand')
    plt.ylabel('handtype')
    plt.legend()
    plt.title('Relation between handtype and hand')
    plt.savefig('fig-hands-dist-tpvsh-preflop.pdf')

    if 0:
        tpoffivecards=np.empty(2598960,dtype='int')
        i=0
        for i1 in range(1,53):
            for i2 in range(i1+1,53):
                for i3 in range(i2+1,53):
                    for i4 in range(i3+1,53):
                        for i5 in range(i4+1,53):
                            tpoffivecards[i]=get_handrank(i1,i2,i3,i4,i5,0,0)
                            i+=1

        tpoffivecdssorted=sorted(tpoffivecards)
        handsseq=np.linspace(1,2598960,2598960)
        plt.figure()
        plt.plot(handsseq,tpoffivecdssorted,label='handtype of hand')
        plt.xlabel('hand')
        plt.ylabel('handtype')
        plt.legend()
        plt.title('Relation between handtype and hand')
        plt.savefig('fig-hands-dist-tpvsh-flop.pdf')


        actiontprange=np.linspace(1,7462,7462)
        actiontprange1=np.linspace(0,1,101)
        actiondensity=np.array(evalActionDensity(actiontprange1,np.array(tpoffivecdssorted)/7462,0.02))
        plt.figure()
        plt.plot(actiontprange1,actiondensity,label='pdf of hand number for flop')
        plt.xlabel('handtype')
        plt.ylabel('probability')
        plt.legend()
        plt.title('Pdf of 2598960 combinations for flop')
        plt.savefig('fig-hands-dist-tp-flop.pdf')

    plt.show()
    return None



# 测试均匀分布的手牌和赢率的分布的转换
def testDistTrans():

    wroftwocards=[]
    for i in range(1326):
        wr=get_winrate(2,0,IdxtoHand[i][0],IdxtoHand[i][1],0,0,0,0,0)
        wroftwocards.append(wr)
    wroftwocardsst=sorted(wroftwocards)

    wroftwocdssorted=[]
    for i in range(1326):
        wroftwocdssorted.append([wroftwocardsst[i],i/1325.0])

    print('wroftwocdssorted=',wroftwocdssorted)
    i=0
    while True:
        print('i=',i,len(wroftwocdssorted))
        if i== len(wroftwocdssorted)-1:
            break
        if abs(wroftwocdssorted[i][0]-wroftwocdssorted[i+1][0])<0.000001:
           wroftwocdssorted.remove([wroftwocdssorted[i][0],wroftwocdssorted[i][1]])
        else:
            i=i+1

    print('wroftwocdssorted=',wroftwocdssorted)

    return None


# 测试均匀分布的手牌对应的赢率的分布，用赢率对应的手牌的数量的密度来表征
def testDistwrofuniformcards():

    if 0:
        wroftwocards=np.zeros(1326)
        for i in range(1326):
            wroftwocards[i]=get_winrate(2,0,IdxtoHand[i][0],IdxtoHand[i][1],0,0,0,0,0)
        
        actionwrrange=np.linspace(np.min(wroftwocards),np.max(wroftwocards),101)
        actiondensity=np.array(evalActionDensity(actionwrrange,wroftwocards,0.01))

        plt.figure()
        plt.plot(actionwrrange,actiondensity,label='pdf of hand number for preflop')
        plt.xlabel('Wr')
        plt.ylabel('probability')
        plt.legend()
        plt.title('Pdf of 1326 hands for preflop')
        plt.savefig('fig-hands-dist-wr-preflop.pdf')

        wroftwocdssorted=sorted(wroftwocards)
        handsseq=np.linspace(0,1,1326)

        plt.figure()
        plt.plot(handsseq,wroftwocdssorted,label='relation between Wr and I')
        plt.xlabel('I')
        plt.ylabel('Wr')
        plt.legend()
        plt.title('Relation between Wr and I')
        plt.savefig('fig-hands-dist-wrvsI-preflop.pdf')

        wroftwocdssmoothed=[]
        w=0.03
        for i in range(1326):
            yp=np.array([kernelepk(np.abs(handsseq[i]-xi)/w) for xi in handsseq])
            ypy=yp*np.array(wroftwocdssorted)
            res=np.sum(ypy)/sum(yp)
            wroftwocdssmoothed.append(res)

        plt.figure()
        plt.plot(handsseq,wroftwocdssmoothed,label='relation between Wr and I')
        plt.xlabel('I')
        plt.ylabel('Wr')
        plt.legend()
        plt.title('Relation between Wr and I')
        plt.savefig('fig-hands-dist-wrvsI-smooth-preflop.pdf')

        plt.figure()
        plt.plot(wroftwocdssmoothed,handsseq,label='relation between I and Wr')
        plt.xlabel('Wr')
        plt.ylabel('I')
        plt.legend()
        plt.title('Relation between I and Wr')
        plt.savefig('fig-hands-dist-Ivswr-smooth-preflop.pdf')

        
        diffIvsWr=Diffoftwovars(handsseq,wroftwocdssmoothed)
        print('diffIvsWr=',diffIvsWr)
        saveddiff=[]
        for i in range(1326):
            saveddiff.append([wroftwocdssmoothed[i],diffIvsWr[i]])
        np.savetxt('test.csv',saveddiff,fmt='%.6f', delimiter=',')


        plt.figure()
        plt.plot(wroftwocdssmoothed,diffIvsWr,label='I\'(Wr)')
        plt.xlabel('Wr')
        plt.ylabel('dI/dWr')
        plt.legend()
        plt.title('Derivative of I(Wr)')
        plt.savefig('fig-hands-Derivative-Ivswr-smooth-preflop.pdf')


    if 1:
        alpha=0.55
        beta=0.65
        zeta1=0.7
        zeta2=0.2
        domains=[[0.0,0.4],[0.4,0.65],[0.65,1]]
        sacts=np.zeros(3)  # for TARD
        sacts1=np.zeros(3) # for MS
        wroffivecards=np.zeros(2598960)
        i=0
        for i1 in range(1,53):
            print('i1=',i1)
            for i2 in range(i1+1,53):
                for i3 in range(i2+1,53):
                    for i4 in range(i3+1,53):
                        for i5 in range(i4+1,53):
                            wroffivecards[i]=get_winrate(2,3,i1,i2,i3,i4,i5,0,0)
                            '''
                            if wroffivecards[i]<alpha:
                                sacts[0]+=0.0  #raise
                                sacts[1]+=0.0  #call
                                sacts[2]+=1.0   #fold
                            elif wroffivecards[i]<beta:
                                sacts[0]+=(1-zeta1)
                                sacts[1]+=zeta1
                                sacts[2]+=0.0
                            else:
                                sacts[0]+=(1-zeta2)
                                sacts[1]+=zeta2
                                sacts[2]+=0.0

                            porb,_=ActModelDProb(wroffivecards[i],domains)
                            sacts1[0]+=porb[2] #因为顺序不同所以调整一下
                            sacts1[1]+=porb[1]
                            sacts1[2]+=porb[0]
                            '''
                            i+=1
        print('sacts TARD=',sacts/2598960)     #sacts TARD= [0.0643342  0.07650291 0.8591629 ]
        print('sacts MS=',sacts1/2598960)  #sacts MS= [0.06312958 0.30231217 0.63455825]

        plt.figure()
        plt.hist(wroffivecards,bins=100,density=True,cumulative=False,rwidth=0.95,histtype='bar')
        plt.title('Wr')

        '''
        actionwrrange=np.linspace(0,1,101)
        actiondensity=np.array(evalActionDensity(actionwrrange,wroffivecards,0.015))
        np.savetxt('actionwrrange.csv',actionwrrange,fmt='%.6f', delimiter=',')
        np.savetxt('actiondensity.csv',actiondensity,fmt='%.6f', delimiter=',')

        plt.figure()
        plt.plot(actionwrrange,actiondensity,label='pdf of hand number for preflop')
        plt.xlabel('Wr')
        plt.ylabel('probability')
        plt.legend()
        plt.title('Pdf of 2598960 combinations for flop')
        plt.savefig('fig-hands-dist-wr-flop.pdf')
        '''

        '''
        print('wr flop min={},max={}'.format(np.min(wroffivecards),np.max(wroffivecards)))
        actionwrrange=np.linspace(np.min(wroffivecards),np.max(wroffivecards),1001)

        wroffivecardsorted=sorted(wroffivecards)
        Ioffivecards=np.zeros_like(actionwrrange)
        for j in range(1001):
            wr=actionwrrange[j]
            id=0
            for i in range(id,2598960-1):
                if wr>wroffivecardsorted[i] and wr<=wroffivecardsorted[i+1]:
                    id=i
                    break
            Ioffivecards[j]=(id+1)/2598960
        
        
        derivativeIatwr=Diffoftwovars(Ioffivecards,actionwrrange)
        print('actionwrrange=',actionwrrange)
        print('Ioffivecards=',Ioffivecards)
        print('derivativeIatwr=',derivativeIatwr)
        wrwithIflop=[]
        derivIvsWrflop=[]
        for i in range(1001):
            wrwithIflop.append([actionwrrange[i],Ioffivecards[i]])
            derivIvsWrflop.append([actionwrrange[i],derivativeIatwr[i]])
        
        np.savetxt('flop-wr-I.csv',wrwithIflop,fmt='%.6f', delimiter=',')
        np.savetxt('flop-deriv-wr-I.csv',derivIvsWrflop,fmt='%.6f', delimiter=',')

        plt.figure()
        plt.plot(Ioffivecards,actionwrrange,label='relation between Wr and I')
        plt.xlabel('I')
        plt.ylabel('Wr')
        plt.legend()
        plt.title('Relation between Wr and I')
        plt.savefig('fig-hands-dist-wrvsI-flop.pdf')


        plt.figure()
        plt.plot(actionwrrange,Ioffivecards,label='relation between I and Wr')
        plt.xlabel('Wr')
        plt.ylabel('I')
        plt.legend()
        plt.title('Relation between I and Wr')
        plt.savefig('fig-hands-dist-Ivswr-flop.pdf')


        plt.figure()
        plt.plot(actionwrrange,derivativeIatwr,label='I\'(Wr)')
        plt.xlabel('Wr')
        plt.ylabel('dI/dWr')
        plt.legend()
        plt.title('Derivative of I(Wr)')
        plt.savefig('fig-hands-Derivative-Ivswr-flop.pdf')

        '''


    plt.show()


    return None


def testfivecardHist():
    
    cdend=52
    n=20000   #259896
    
    wroffivecards2=[]
    Ioffivecards2=[]
    i=0
    cdlist=range(1,cdend+1)
    while i<n:
        if i%10000==0: print('i=',i)
        cds=random.sample(cdlist,5)
        wroffivecards2.append(get_winrate(2,3,cds[0],cds[1],cds[2],cds[3],cds[4],0,0))
        #信息集的id不太好定义，但是我们用一个5张牌组合代表其所对应的10个信息集，这样也是可以的。
        #也就是5张牌组合对应的10个信息集放到一起
        #这里以10个信息集的中点来表示所有这这10个信息集
        Ioffivecards2.append(getCombinationId(sorted(cds),1,52)*10-5)
        i+=1

    
    plt.figure()
    plt.hist(Ioffivecards2,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar')
    plt.title('I Hist of {} samples at flop'.format(n))
    plt.xlabel('I')
    plt.savefig('fig-I-hist-of-samples-5cds-sp.pdf')
    

    pdfwrfivecards=np.loadtxt('flop-wr-pdf.csv', delimiter=',')
    print('pdfwrfivecards',pdfwrfivecards)
    
    plt.figure()
    plt.hist(wroffivecards2,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar',label='Hist of samples')
    plt.plot(pdfwrfivecards[:,0],pdfwrfivecards[:,1],label='PDF of enumerations')
    plt.title('Wr Hist of {} samples at flop'.format(n))
    plt.xlabel('Wr')
    plt.legend()
    plt.savefig('fig-wr-hist-of-samples-5cds-sp.pdf')

    plt.show()
    return None


def testtwocardHist():

    #遍历的
    wroftwocards=np.zeros(1326)
    for i in range(1326):
        wroftwocards[i]=get_winrate(2,0,IdxtoHand[i][0],IdxtoHand[i][1],0,0,0,0,0)
    
    actionwrrange=np.linspace(0,1,101)
    actiondensity=np.array(evalActionDensity(actionwrrange,wroftwocards,0.02))
    #使用相同的数据扩展10倍，密度结果是一样的。
    #wroftcdsset=wroftwocards.tolist()*10
    #print('wroftcdsset',len(wroftcdsset))
    #actiondensity=np.array(evalActionDensity(actionwrrange,wroftcdsset,0.02))

    #采样的
    wroftwocards1=[]
    idoftwocards1=[]
    sig=10
    n=1326*sig
    i=0
    cdlist=range(1,53)
    while i<n:
        #if i%100==0: print('i=',i)
        cds=random.sample(cdlist,2)
        wroftwocards1.append(get_winrate(2,0,cds[0],cds[1],0,0,0,0,0))
        id=int(getCombinationId(sorted(cds),1,52))
        idoftwocards1.append(id)
        i+=1

    plt.figure()
    plt.hist(wroftwocards1,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar')
    plt.title('Wr Hist of {} two cards samples'.format(n))
    plt.xlabel('Wr')
    plt.savefig('fig-wr-hist-of-samples-2cds.pdf')

    plt.figure()
    plt.hist(idoftwocards1,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar')
    plt.title('I Hist of {} two cards samples'.format(n))
    plt.xlabel('I')
    plt.savefig('fig-I-hist-of-samples-2cds-{}.pdf'.format(n))

    plt.figure()
    plt.hist(wroftwocards,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar',label='Hist')
    plt.plot(actionwrrange,actiondensity,label='PDF')
    plt.title('Wr Hist of two cards enumeration samples')
    plt.xlabel('Wr')
    plt.savefig('fig-wr-hist-of-samples-2cds-enum.pdf')

    plt.figure()
    plt.hist(wroftwocards1,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar',label='samples')
    plt.hist(wroftwocards,bins=100,density=True,cumulative=False,rwidth=0.5,histtype='bar',label='enumerations')
    plt.title('Wr Hist of {} two cards samples'.format(n))
    plt.legend()
    plt.xlabel('Wr')
    plt.savefig('fig-I-hist-of-samples-2cds-cnpr-{}.pdf'.format(n))

    plt.show()
    return None



def testfivecardHist1():
    #通过这个函数的测试发现了binom(52,5)这样的信息集是有问题的。
    cdend=52
    nc=int(Cmn(cdend,5))
    print('nc=',nc)
    n=20000
    
    wroffivecards2=[]
    cdslst2=[]
    i=0
    cdlist=range(1,cdend+1)
    while i<n:
        if i%10000==0: print('i=',i)
        #cds=sorted(random.sample(cdlist,5))# cds若不进行排序，那么wr的情况数更多，说嘛信息集更多，说明原来的binom(52,5)的信息集是错误的。
        cds=random.sample(cdlist,5)
        print('cds=',cds)
        wr=get_winrate(2,3,cds[0],cds[1],cds[2],cds[3],cds[4],0,0)
        wroffivecards2.append(wr)
        if cds not in cdslst2:
            cdslst2.append([cds,wr])
        
        i+=1
    #np.savetxt('sample.txt',sorted(cdslst2),delimiter =" ",fmt ='% s')

    wroffivecards1=[]
    cdslst1=[]
    i=0
    for i1 in range(1,cdend+1):
        print('i1=',i1)
        for i2 in range(i1+1,cdend+1):
            for i3 in range(i2+1,cdend+1):
                for i4 in range(i3+1,cdend+1):
                    for i5 in range(i4+1,cdend+1):
                        print('cds=',i1,i2,i3,i4,i5)
                        wr=get_winrate(2,3,i1,i2,i3,i4,i5,0,0)
                        cds=[i1,i2,i3,i4,i5]
                        wroffivecards1.append(wr)
                        cdslst1.append([cds,wr])
                        i+=1
    print('total=',i)
    np.savetxt('enumeration.txt',sorted(cdslst1),delimiter =" ",fmt ='% s')

    plt.figure()
    plt.hist(wroffivecards2,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar',label='samples')
    plt.hist(wroffivecards1,bins=100,density=True,cumulative=False,rwidth=0.5,histtype='bar',label='enumerations')
    plt.title('Wr Hist of five cards samples')
    plt.xlabel('Wr')
    plt.legend()
    plt.savefig('fig-wr-hist-of-samples-5cds-cnpr.pdf')

    plt.show()
    return None


#测试采样中在fpbr的信息集、wr的非均匀性：
def testnonuniforitypf():

    cdend=52
    n=6000
    random.seed(a=32465)

    wroftwocards1=[]
    wroftwocards2=[]
    cdslst1=[]
    cdslst2=[]
    i=0
    cdlist=range(1,cdend+1)
    while i<n:
        if i%10000==0: print('i=',i)
        #cds=sorted(random.sample(cdlist,5))# cds若不进行排序，那么wr的情况数更多，说嘛信息集更多，说明原来的binom(52,5)的信息集是错误的。
        '''
        cds=random.sample(cdlist,2)
        
        wr=get_winrate(2,0,cds[0],cds[1],0,0,0,0,0)
        wroftwocards1.append(wr)
        id=getCombinationId(cds, 1,52)
        cdslst1.append(id)

        cdlistrest=copy.deepcopy(list(cdlist))
        cdlistrest.remove(cds[0])
        cdlistrest.remove(cds[1])
        cds1=random.sample(cdlistrest,2)
        print('cds=',cds,cds1)
        '''

        cdsall=[]
        cdsall.append(random.randint(1,52))
        while len(cdsall)<4:
            cd=random.randint(1,52)
            if cd not in cdsall:
                cdsall.append(cd)
        cds=cdsall[:2]
        cds1=cdsall[2:]

        wr=get_winrate(2,0,cds[0],cds[1],0,0,0,0,0)
        wroftwocards1.append(wr)
        id=getCombinationId(cds, 1,52)
        cdslst1.append(id)


        rd=random.random()
        if rd<=0.165:
            wr=get_winrate(2,0,cds1[0],cds1[1],0,0,0,0,0)
            wroftwocards2.append(wr)
            id=getCombinationId(cds1, 1,52)
            cdslst2.append(id)
        i+=1

    print("len:",len(cdslst1),len(cdslst2))

    actionwrrange=np.linspace(0,1,101)
    actiondensity1=np.array(evalActionDensity(actionwrrange,wroftwocards1,0.02))
    actiondensity2=np.array(evalActionDensity(actionwrrange,wroftwocards2,0.02))

    plt.figure()
    plt.plot(actionwrrange,actiondensity1,label='P')
    plt.plot(actionwrrange,actiondensity2,label='O')
    plt.title('Wr Hist of two cards enumeration samples')
    plt.xlabel('Wr')


    plt.figure()
    plt.hist(wroftwocards1,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar',label='P')
    plt.hist(wroftwocards2,bins=100,density=True,cumulative=False,rwidth=0.5,histtype='bar',label='O')
    plt.title('Wr Hist of {} two cards samples'.format(n))
    plt.legend()
    plt.xlabel('Wr')


    plt.figure()
    plt.hist(cdslst1,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar',label='P')
    plt.hist(cdslst2,bins=100,density=True,cumulative=False,rwidth=0.5,histtype='bar',label='O')
    plt.title('I Hist of {} two cards samples'.format(n))
    plt.legend()
    plt.xlabel('I')
    
    plt.show()


    return None


def testnonuniforitypf1():

    cdend=52
    random.seed(a=324334)  #3133670482,3937880454

    cardslist1=np.loadtxt('cardslist.md',delimiter=',',dtype=int)
    n=(len(cardslist1))
    print('n=',n)

    if True:
        cardslist=np.zeros_like(cardslist1,dtype=int)
        for i in range(int(n/2)):
            cardslist[i,:]=cardslist1[2*i,:]
        for i in range(int(n/2)):
            cardslist[int(n/2)+i,:]=cardslist1[2*i+1,:]
        np.savetxt('cardslist2.md',cardslist[:,:4],delimiter=',',fmt="%d")
        cardslist+=1
    else:
        cardslist=cardslist1+1
    
    wroftwocards1=[]
    wroftwocards2=[]
    cdslst1=[]
    cdslst2=[]
    i=0
    while i<n:
        cds=cardslist[i,:2].tolist()
        cds1=cardslist[i,2:4].tolist()

        wr=get_winrate(2,0,cds[0],cds[1],0,0,0,0,0)
        wroftwocards1.append(wr)
        id=getCombinationId(cds, 1,52)
        cdslst1.append(id)

        rd=random.random()
        if rd<=0.085:
            wr=get_winrate(2,0,cds1[0],cds1[1],0,0,0,0,0)
            wroftwocards2.append(wr)
            id=getCombinationId(cds1, 1,52)
            cdslst2.append(id)
        i+=1

    print("len:",len(cdslst1),len(cdslst2))

    actionwrrange=np.linspace(0,1,101)
    actiondensity1=np.array(evalActionDensity(actionwrrange,wroftwocards1,0.02))
    actiondensity2=np.array(evalActionDensity(actionwrrange,wroftwocards2,0.02))

    plt.figure()
    plt.plot(actionwrrange,actiondensity1,label='P')
    plt.plot(actionwrrange,actiondensity2,label='O')
    plt.title('Wr Hist of two cards enumeration samples')
    plt.xlabel('Wr')

    plt.figure()
    plt.hist(cdslst1,bins=100,density=True,cumulative=False,rwidth=0.9,histtype='bar',label='P')
    plt.title('I Hist of {} two cards samples-P'.format(n))
    plt.legend()
    plt.xlabel('I')


    plt.figure()
    plt.hist(cdslst2,bins=100,density=True,cumulative=False,rwidth=0.5,histtype='bar',label='O')
    plt.title('I Hist of {} two cards samples-O'.format(n))
    plt.legend()
    plt.xlabel('I')
    
    plt.show()


    return None





def testholeplusboardHist():
    
    cdend=52
    nc=int(Cmn(cdend,5))
    print('nc=',nc)
    
    wroffivecards1=[]
    nd1=int(Cmn(cdend,2))
    nd2=int(Cmn(cdend,3))
    wrofholepboard=np.zeros((nd1,nd2))
    i=0
    for i1 in range(1,cdend+1):
        print('i1=',i1)
        for i2 in range(i1+1,cdend+1):
            for i3 in range(i2+1,cdend+1):
                for i4 in range(i3+1,cdend+1):
                    for i5 in range(i4+1,cdend+1):
                        #print('cds=',i1,i2,i3,i4,i5)
                        cds=[i1,i2,i3,i4,i5]
                        for cda1 in itertools.combinations(cds, 2):
                            cda=list(cda1)
                            cdb=[x for x in cds if x not in cda]
                            wr=get_winrate(2,3,cda[0],cda[1],cdb[0],cdb[1],cdb[2],0,0)
                            wroffivecards1.append(wr)
                            id1=int(getCombinationId(sorted(cda),1,cdend))
                            id2=int(getCombinationId(sorted(cdb),1,cdend))
                            wrofholepboard[id1-1,id2-1]=wr
                            i+=1
    print('total=',i)

    actionwrrange1=np.linspace(0,1,101)
    actiondensity=np.array(evalActionDensity(actionwrrange1,wroffivecards1,0.02))
    wrpdfoffivecards=[]
    for j in range(101):
        wrpdfoffivecards.append([actionwrrange1[j],actiondensity[j]])
    np.savetxt('flop-wr-pdf.csv',wrpdfoffivecards,fmt='%.6f', delimiter=',')


    actionwrrange=np.linspace(np.min(wroffivecards1),np.max(wroffivecards1),201)
    wroffivecardsorted=sorted(wroffivecards1)
    Ioffivecards=np.zeros_like(actionwrrange)
    for j in range(201):
        wr=actionwrrange[j]
        id=0
        for i in range(id,nc*10-1):
            if wr>wroffivecardsorted[i] and wr<=wroffivecardsorted[i+1]:
                id=i
                break
        Ioffivecards[j]=(id+1)/(nc*10)
    
    
    derivativeIatwr=Diffoftwovars(Ioffivecards,actionwrrange)
    print('actionwrrange=',actionwrrange)
    print('Ioffivecards=',Ioffivecards)
    print('derivativeIatwr=',derivativeIatwr)
    wrwithIflop=[]
    derivIvsWrflop=[]
    for i in range(201):
        wrwithIflop.append([actionwrrange[i],Ioffivecards[i]])
        derivIvsWrflop.append([actionwrrange[i],derivativeIatwr[i]])

    np.savetxt('flop-wr-I.csv',wrwithIflop,fmt='%.6f', delimiter=',')
    np.savetxt('flop-deriv-wr-I.csv',derivIvsWrflop,fmt='%.6f', delimiter=',')

    plt.figure()
    plt.plot(Ioffivecards,actionwrrange,label='relation between Wr and I')
    plt.xlabel('I')
    plt.ylabel('Wr')
    plt.legend()
    plt.title('Relation between Wr and I')
    plt.savefig('fig-hands-dist-wrvsI-flop.pdf')


    plt.figure()
    plt.plot(actionwrrange,Ioffivecards,label='relation between I and Wr')
    plt.xlabel('Wr')
    plt.ylabel('I')
    plt.legend()
    plt.title('Relation between I and Wr')
    plt.savefig('fig-hands-dist-Ivswr-flop.pdf')


    plt.figure()
    plt.plot(actionwrrange,derivativeIatwr,label='I\'(Wr)')
    plt.xlabel('Wr')
    plt.ylabel('dI/dWr')
    plt.legend()
    plt.title('Derivative of I(Wr)')
    plt.savefig('fig-hands-Derivative-Ivswr-flop.pdf')

    plt.figure()
    plt.plot(actionwrrange1,actiondensity,label='Pdf of hand number at flop')
    plt.xlabel('Wr')
    plt.ylabel('probability')
    plt.legend()
    plt.title('Pdf of hole+board cards combinations for flop')
    plt.savefig('fig-hands-dist-wr-flop-hb.pdf')
    
    plt.figure()
    plt.hist(wroffivecards1,bins=100,density=True,cumulative=False,rwidth=0.5,histtype='bar',label='enumerations')
    plt.title('Wr Hist of samples at flop')
    plt.xlabel('Wr')
    plt.legend()
    plt.savefig('fig-wr-hist-of-samples-flop-hb.pdf')

    plt.figure()
    plt.imshow(wrofholepboard,origin = 'lower',extent=[0,1,0,1])#,cmap='jet'
    plt.colorbar()
    plt.title('Wr Contours of samples at flop')
    plt.xlabel('board cards')
    plt.ylabel('hole cards')
    plt.savefig('fig-wr-cntr-of-samples-flop-hb.pdf')


    plt.show()
    return None



def testflopIwithwr():

    wrwithIflop=np.loadtxt('flop-wr-I.csv', delimiter=',')
    derivIvsWrflop=np.loadtxt('flop-deriv-wr-I.csv', delimiter=',')

    plt.figure()
    plt.plot(wrwithIflop[:,1],wrwithIflop[:,0],label='relation between Wr and I')
    plt.xlabel('I')
    plt.ylabel('Wr')
    plt.legend()
    plt.title('Relation between Wr and I')
    plt.savefig('fig-hands-dist-wrvsI-flop.pdf')


    plt.figure()
    plt.plot(wrwithIflop[:,0],wrwithIflop[:,1],label='relation between I and Wr')
    plt.xlabel('Wr')
    plt.ylabel('I')
    plt.legend()
    plt.title('Relation between I and Wr')
    plt.savefig('fig-hands-dist-Ivswr-flop.pdf')


    plt.figure()
    plt.plot(derivIvsWrflop[:,0],derivIvsWrflop[:,1],label='I\'(Wr)')
    plt.xlabel('Wr')
    plt.ylabel('dI/dWr')
    plt.legend()
    plt.title('Derivative of I(Wr)')
    plt.savefig('fig-hands-Derivative-Ivswr-flop.pdf')
    plt.show()
    return None



if __name__ == "__main__":
    

    print(gethandstrrk('AsKdQdJsTc'))
    print(gethandstrrk('AcAd4s8dQdJsTc'))

    #testCardbg2valsuit()

    #testhandtypetohand()
    #testDistTrans()
    #testDistwrofuniformcards()
    #testCMN()
    #testfivecardHist()

    #testnonuniforitypf()
    #testnonuniforitypf1()

    #testtwocardHist()
    #testfivecardHist1()
    #testholeplusboardHist()


    #测试一下getoppoprob等函数
    #testfuncsa()
    #rw1=getwinrate(2,['7d', '6h'],['4h', '9c', '5d'])
    #print(rw1)

    #testgetwr2p2s()
    #rw1=getwinrate(2,['3h', 'Ac'],[])
    #print(rw1)

    #测试输出对手手牌的信息
    #testHandoppent()
    #print(intcard[1],intcard[52])
    #testhandtrans(885,['8h', 'As', '3c'])

    #测试getstrgcount函数
    #testgetstrgcount()

    #测试
    #testWrtoRange()

    #testcardbg2sm()

    #print('wrrange=',np.min(handOpponet[:,1]),np.max(handOpponet[:,1]))


    pass

